[
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html",
    "href": "pages/walkthrough/code0a_walkthrough.html",
    "title": "Code walkthrough",
    "section": "",
    "text": "This is a single .qmd file that walks through the code in Model_Structure.R. It is rendered as a single file, then the output .md file is split into seperate .md files that can be incorporated into seperate .qmd pages.\nThis is done as running the code within seperate .qmd pages requires that the global environment is shared between them, which is difficult to achieve without long run times or very large files containing the environment.\nSPLITMD_CODE1_START\nThis page contains some of the basic set-up steps like loading the functions and lots of the model inputs, as well as establishing the possible treatment sequences."
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#load-required-packages",
    "href": "pages/walkthrough/code0a_walkthrough.html#load-required-packages",
    "title": "Code walkthrough",
    "section": "Load required packages",
    "text": "Load required packages\n\n#### 1. Installation ###########\n#### This code has been created using R version 4.3.1\n#### All packages used by this model are provided here\n\n#### Comment out the below section which installs the relevant packages after the first run of the model\n# install.packages(\"shiny\", quiet = TRUE)   ### the quiet argument is used to avoid warnings appearing in the console (useful for later conversion to web app)\n# install.packages(\"gtools\", quiet = TRUE)\n# install.packages(\"openxlsx\", quiet = TRUE)\n# install.packages(\"flexsurv\", quiet = TRUE)\n# install.packages(\"tidyverse\", quiet = TRUE)\n# install.packages(\"data.table\", quiet = TRUE)\n# install.packages(\"heemod\", quiet = TRUE)\n# install.packages(\"logOfGamma\", quiet = TRUE)\n# install.packages(\"ggplot2\", quiet = TRUE)\n# install.packages(\"survminer\", quiet = TRUE)\n# install.packages(\"officer\", quiet = TRUE)\n# install.packages(\"officedown\", quiet = TRUE)\n# install.packages(\"magrittr\", quiet = TRUE)\n# install.packages(\"Hmisc\", quiet = TRUE)\n# install.packages(\"future.apply\", quiet = TRUE)\n# install.packages(\"crosstable\", quiet = TRUE)\n# install.packages(\"flextable\", quiet = TRUE)\n# install.packages(\"stringr\", quiet = TRUE)\n# install.packages(\"BCEA\", quiet = TRUE)\n# install.packages(\"collapse\", quiet = TRUE)\n# install.packages(\"scales\", quiet = TRUE)\n# install.packages(\"Matrix\", quiet = TRUE)\n# install.packages(\"dplyr\", quiet = TRUE)\n# install.packages(\"progressr\", quiet = TRUE)\n# install.packages(\"microbenchmark\", quiet = TRUE)\n\n### Loading libraries \n\n#### This section needs to be run every time and calls each package from the library \nlibrary(shiny, quiet = TRUE)   \nlibrary(gtools, quiet = TRUE)\nlibrary(openxlsx, quiet = TRUE)\nlibrary(flexsurv, quiet = TRUE)\nlibrary(tidyverse, quiet = TRUE)\nlibrary(data.table, quiet = TRUE)\nlibrary(heemod, quiet = TRUE)\nlibrary(logOfGamma, quiet = TRUE)\nlibrary(ggplot2, quiet = TRUE)\nlibrary(survminer, quiet = TRUE)\nlibrary(officer, quiet = TRUE)\nlibrary(officedown, quiet = TRUE)\nlibrary(magrittr, quiet = TRUE)\nlibrary(Hmisc, quiet = TRUE)\nlibrary(future.apply, quiet = TRUE)\nlibrary(crosstable, quiet = TRUE)\nlibrary(flextable, quiet = TRUE)\nlibrary(stringr, quiet = TRUE)\nlibrary(BCEA, quiet = TRUE)\nlibrary(collapse, quiet = TRUE)\nlibrary(scales, quiet = TRUE)\nlibrary(Matrix, quiet = TRUE)\nlibrary(dplyr, quiet = TRUE)\nlibrary(progressr, quiet = TRUE)\nlibrary(microbenchmark, quiet = TRUE)\nlibrary(knitr, quiet = TRUE)"
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#set-file-paths",
    "href": "pages/walkthrough/code0a_walkthrough.html#set-file-paths",
    "title": "Code walkthrough",
    "section": "Set file paths",
    "text": "Set file paths\n\n# Set path to folders\nd_path = \"../../../1_Data\"\nf_path = \"../../../3_Functions\"\no_path = \"../../../4_Output\""
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#define-some-of-the-model-settings",
    "href": "pages/walkthrough/code0a_walkthrough.html#define-some-of-the-model-settings",
    "title": "Code walkthrough",
    "section": "Define some of the model settings",
    "text": "Define some of the model settings\nThe majority of this code block is dedicated to setting the model to run sequentially or in parallel. If running the base case using Model_Structure.R as provided (e.g. with pre-run survival analysis), you may find that the quickest option is to run the model sequentially. This is already set up by default, with keep_free_cores &lt;- NA. For reference, the run time for this on an Intel Core i7-12700H with 32GB RAM running Ubuntu 22.04.4 Linux was 40 minutes.\n\n# Multi-core processing:\n# \n# Instructions.\n# \n# This model is highly RAM intensive. You need a lot of RAM on your computer\n# to run this model due to the large amount of very large matrix multiplications\n# (up to approximately 15,000 discrete health states in the model). Therefore,\n# in order to efficiently run the model, it is a balancing act between RAM\n# usage and CPU usage. \n# \n# Some rough guidance is:\n# \n# - If you have 8GB of RAM on your computer, you can run this model with 2 cores only\n#   but it may even be faster to run in series if you have other things open on your\n#   computer at the same time. Therefore, please set keep_free_cores to NA and run\n#   the model in series. This is because when the RAM on your computer runs out\n#   your computer will use the hard-disk instead which is extremely slow.\n# - If you have 16GB of RAM on your computer, parallel should be a lot faster.\n#   On my laptop (I7 8th gen, 16GB RAM, running Linux for low RAM usage) I can\n#   run with 5 cores whilst using about 12GB of RAM running this model. \n# - if you have 24GB or 32GB of RAM, you should be able to run the model with 8\n#   and up to around 14 cores before running out of RAM whilst running the model.\n# - if you are using a HPC, you should be able to run this model with many cores\n#   due to the typically large amount of RAM available per core in a HPC\n# \n# \n# IF YOU DO NOT WANT MULTICORE SET keep_free_cores TO NA\n# \n# \nkeep_free_cores &lt;- NA\nif (any(is.na(keep_free_cores), keep_free_cores&lt;0)) {\n  plan(sequential)\n} else {\n  plan(multisession(workers = max(availableCores()-keep_free_cores,1)))\n}\n\nThe three settings in this code block:\n\nprogressr::handlers(\"progress\") - one of the settings for how progress is reported whilst code is running\ncrosstable::options(crosstable_units=\"cm\") - the crosstable package generates descriptive statistics with function crosstable(), and this sets the unit for it, although it should be noted that this appears to be legacy code as it doesn’t appear that crosstable() is used anywhere in the repository\nqc_mode - the input for verbose in f_NMA_AddAssumptionsToNetwork() which, if true, will mean that extra outputs are printed to the console\n\n\n# Other generic settings for the progress bar and units for table widths\nhandlers(\"progress\")\noptions(crosstable_units=\"cm\")\n\n#### 2. Loading functions ###########\n\n\n# This variable is used throughout the model to define whether to provide additional outputs useful for QC or not\n# The model will take longer to run when this is set to TRUE\nqc_mode &lt;- FALSE"
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#import-model-functions",
    "href": "pages/walkthrough/code0a_walkthrough.html#import-model-functions",
    "title": "Code walkthrough",
    "section": "Import model functions",
    "text": "Import model functions\nThe functions for the analysis in Model_Structure.R are stored in the 3_Functions/ folder. Here, they are imported into our environment.\n\n# 2.1. Excel data extraction functions -----------------------------------------\n\n#### These functions are used to extract parameters from the Excel input workbook for use in R\n#### During Phase 2 a Shiny front-end will be added to the model which will allow an alternative mechanism to upload these types of inputs\n\nsource(file.path(f_path, \"excel/extract.R\"))\n\n# 2.2. Treatment sequencing functions ----------------------------------------\n\n#### Function: filter to active treatments and lines\n##### Takes as an input the defined sequences, evaluation type and line to start the evaluation from \n##### Other input is % receiving each subs therapy at each line dependent on previous treatments received \n##### Reweights so that the % receiving each treatment sums to 100% within each arm / line being studied\n##### Outputs a matrix that has the % receiving each possible combination\n\nsource(file.path(f_path, \"sequencing/sequences.R\"))\n\n# 2.3. Survival analysis functions ---------------------------------------------\n\n# Function: conduct survival analysis\n##### by treatment, line, population and outcome fitted survival curves using Flexsurvreg (exp, Weibull, lognormal, loglog, Gompertz, gen gamma)\n##### calculation of and adjustment for general population\n##### adjustment for treatment effect waning\n\nsource(file.path(f_path, \"survival/Survival_functions.R\"))\nsource(file.path(f_path, \"survival/other_cause_mortality.R\"))\nsource(file.path(f_path, \"survival/treatment_effect_waning.R\"))\n\n# 2.4 Misc functions ----------------------------------------------------------\n\n### these functions enable smoother data cleaning and manipulation\n\nsource(file.path(f_path, \"misc/other.R\"))\nsource(file.path(f_path, \"misc/shift_and_pad.R\"))\nsource(file.path(f_path, \"misc/cleaning.R\"))\n\n# 2.4.1 Functions imposing list structures -----------------------------------\n\nsource(file.path(f_path, \"misc/nesting.R\"))\nsource(file.path(f_path, \"misc/discounting.R\"))\nsource(file.path(f_path, \"misc/qdirichlet.R\"))\nsource(file.path(f_path, \"misc/plotting.R\"))\nsource(file.path(f_path, \"misc/structure.R\"))\n\n# 2.4.2 Functions calculating HRs from FPNMA coefficients and other FPNMA manipulation ------\n\nsource(file.path(f_path, \"misc/fpnma_fns.R\"))\n\n\n# 2.5 Utility functions -------------------------------------------------------\n\nsource(file.path(f_path, \"utility/age_related.R\"))\nsource(file.path(f_path, \"costs_and_QALYs/utility_processing.R\"))\n\n# 2.6 AE functions --------------------------------------------------------\n\nsource(file.path(f_path, \"adverse_events/AE_steps.R\"))\n\n# 2.7 Cost calculation functions --------------------------------------------\n\nsource(file.path(f_path, \"costs_and_QALYs/cost_processing.R\"))\n\n\n# 2.8 State transition modelling functions --------------------------------\n\nsource(file.path(f_path, \"markov/markov.R\"))\n\n# 2.9 Patient flow functions ----------------------------------------------\n\nsource(file.path(f_path, \"patient_flow/overarching.R\"))\nsource(file.path(f_path, \"patient_flow/partitioned_survival.R\"))\nsource(file.path(f_path, \"patient_flow/markov.R\"))\nsource(file.path(f_path, \"patient_flow/drug_costs.R\"))\nsource(file.path(f_path, \"patient_flow/hcru_costs.R\"))\nsource(file.path(f_path, \"patient_flow/qalys.R\"))\nsource(file.path(f_path, \"patient_flow/ae.R\"))\n\n\n\n# 2.10 Results processing functions ---------------------------------------\n\nsource(file.path(f_path, \"results/incremental_analysis.R\"))\nsource(file.path(f_path, \"results/model_averaging.R\"))\nsource(file.path(f_path, \"results/partitioned_survival.R\"))\nsource(file.path(f_path, \"misc/severity_modifier.R\"))\nsource(file.path(f_path, \"results/results_tables.R\"))\nsource(file.path(f_path, \"psa/psa functions.R\"))\n\n\n\n# 2.11 Office software outputs --------------------------------------------\n\nsource(file.path(f_path, \"reporting/word_document_output.R\"))"
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#get-some-of-the-model-inputs",
    "href": "pages/walkthrough/code0a_walkthrough.html#get-some-of-the-model-inputs",
    "title": "Code walkthrough",
    "section": "Get some of the model inputs",
    "text": "Get some of the model inputs\n\nIntroductory comments\nThis section of the code is mostly comments that describe:\n\nThe structure of i which contains model inputs\nThat survival analysis will be conducted using state transition (markov) models and partitioned survival analysis (partSA)\nThe five input files, which are detailed within the documentation on the page Input data\n\nThere is a line of code to define User_types, but this appears to be legacy as it is not used anywhere.\n\n# 3. Model inputs structure --------------------------------------------------\n\n# Model inputs should be in a list called i. This list then contains all of the\n# inputs for the model, NOT the parameters used to calculate the model. In effect,\n# this is a place to store all model information BEFORE it gets boiled down to\n# what's needed to run 1 model.\n# \n# using i allows subsetting by categorisation, which makes things a lot easier\n# to find and avoids all long variable names\n# \n# the structure of i should be by category. There are the following \n# categories:\n# \n# dd - dropdown inputs taken from Excel\n# i - parameter inputs taken from Excel\n# r_ tables taken from Excel\n# List, id and lookup - lists defined and used within the code\n# basic - basic inputs (time horizon, cycle length, discount rates, so on so forth)\n# surv  - survival analysis inputs including raw data\n# sequences and seq - inputs and outputs related to the possible sequences of treatments\n# cost  - drug and hcru costs. All costs are here to keep things together (dosing is not cost)\n# util and QALYs  - utility and QALY inputs\n# misc  - misc inputs e.g. graph labelling\n# \n\n#### 3.1 Loading input parameters ###########\n\n# This model allows two possible structures to be analysed: state transition with a user definable number of lines\n# with health states based on time to discontinuation (drug costs) and progression status (quality of life and movement \n# between lines) and PartSA with 3 health states (pre-progression, post-progression and death)\n\n# During Phase 1 of this pilot we use the model to evaluate the decision problem for a single therapy \n# (cabo+nivo, defined as molecule 1) starting at 1st line\n# During Phase 2 we will adapt this code to evaluate the cost-effectiveness of sequences starting at a user-defined line\n\n# Inputs to this model need to be downloaded from NICEdocs \n\nUser_types &lt;- c(\"Submitting company\", \"NICE\", \"EAG\", \"Committee\", \"NHSE\", \"Clinical expert\", \"Patient expert\", \"Non-intervention stakeholder\", \"Public\")\n\n# The submitting company are able to see their own CIC and AIC data (marked up blue / yellow in reporting but not anything else: green marking\n# green marked data has been either be replaced with 0 [PAS discounts, RWE IPD] or dummy data)\n# NICE users will be able to see everything\n# Other users will not be able to see any marked data, this is replaced with dummy data\n\n# The way raw data is fed into the model currently works as follows\n# Define the path to where the data file lives using the select file functionality\n\n# The model then processes the file the user selected\n\n# There are a number of files which contain raw or intermediate inputs:\n# 1. The Excel user interface - this contains information from company data and the UK RWE\n# 2. The proportional hazards NMA CODA RDS file - this contains information from company data\n# 3. The fractional polynomials NMA RDS file - this contains information from company data \n# 4. Either the raw data file containing the pseudo-IPD for all trials for survival analysis (RWE and company data included); or\n# 5. The RDS output from the survival analysis using both RWE and company data\n\n# You will need to manually select the inputs file relevant to your user type, this is not stored on Github as access to CIC information differs by user type\n\n\n\nGet inputs from excel workbook and save as list i\nImport the file at excel_path using f_excel_extract(), and then tidy i$R_table_param using f_excel_cleanParams().\nIf the file doesn’t exist, assuming the user is in RStudio, a dialog box will appear with the system files, and the user should then select a file from their directory. The dialog will open in 1_Data/, show only .xlsm files, and the accept/ok button has the text ID6184_RCC_model inputs....xlsm.\n\n# The first part of this code pulls all of the named ranges from the excel workbook, expand the parameters table\n\n#Option to define Excel path on local machine - comment in this and comment out the code below to select file\nexcel_path &lt;- file.path(d_path, \"ID6184_RCC_model inputs FAD version [UK RWE unredacted, ACIC redacted, cPAS redacted].xlsm\")\n#i &lt;- f_excel_extract(excel_path, verbose = TRUE)\n\nif (file.exists(excel_path)) {\n  i &lt;- f_excel_extract(excel_path, verbose = FALSE)\n} else {\n  i &lt;- f_excel_extract(rstudioapi::selectFile(\n    caption = \"Select the Excel inputs file (ID6184_RCC_model inputs....xlsm)\",\n    label = \"ID6184_RCC_model inputs....xlsm\",\n    path = \"./1_Data/\",\n    filter = \"Excel Files (*.xlsm)\",\n    existing = TRUE\n  ), verbose = FALSE)\n}\n\ni &lt;- c(i,f_excel_cleanParams(i$R_table_param))\n\n\n\n\n\n\n\nWhat does f_excel_extract() do?\n\n\n\n\n\nThis function uses openxlsx::getNamedRegions() to find named regions in the workbook. These are all stored in a sheet called named ranges. As illustrated in Input data, these consist of two columns:\n\nA name for the region (e.g. List_pop1_allowed)\nThe region, which consists of the: sheet, column/s and row/s (e.g. =Lists!$BA$11:$BA$22)\n\n\nThe function f_excel_extract() extracts each of these, saving them into a nested list called i. Each element in the list is a row from the named ranges sheet - for example:\n\ni$List_pop1_allowed\n\n [1] \"avelumab_plus_axitinib\"      \"axitinib\"                   \n [3] \"cabozantinib\"                \"everolimus\"                 \n [5] \"lenvatinib_plus_everolimus\"  \"cabozantinib_plus_nivolumab\"\n [7] \"nivolumab_monotherapy\"       \"pazopanib\"                  \n [9] \"sunitinib\"                   \"tivozanib\"                  \n\n\nThe exception is the first element which is a copy of the named ranges sheet:\n\nkable(head(i[[1]]))\n\n\n\n\n\n\n\n\nName\nCell.Range\n\n\n\n\napply_waning_to\n=Lists!$Y\\(10:\\)Y\\(11      |\n|bc_settings_rng        |=Lists!\\)B\\(99:\\)B\\(174     |\n|cabo_nivo_outcome_from |=Lists!\\)W\\(10            |\n|cabo_nivo_outcomes     |=Lists!\\)X\\(10:\\)X\\(12      |\n|count_bc_settings      |=Lists!\\)B\\(97            |\n|dd_2ndline_NMA         |='Model settings'!\\)G$40\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat does f_excel_cleanParams() do?\n\n\n\n\n\nThis function is applied to i$R_table_param which is the full table from the sheet All parameters.\n\nkable(head(i$R_table_param))\n\n\n\n\n\n\n\n\n\nParameter.description\nParameter.name\nMean.current.value\n\n\n\n\nInclude cabo nivo? (1=yes, 0=no)\ncabo_nivo_include\n1\n\n\nInclude pem len? (1=yes, 0=no)\npem_len_include\n1\n\n\nInclude panzopanib? (1=yes, 0=no)\npazopanib_include\n1\n\n\nInclude tivozanib? (1=yes, 0=no)\ntivozanib_include\n1\n\n\nInclude sunitinib? (1=yes, 0=no)\nsunitinib_include\n1\n\n\nInclude cabo monotherapy? (1=yes, 0=no)\ncabo_include\n1\n\n\n\n\n\nThe function f_excel_cleanParams():\n\nConverts each row of the table into a list, with value from Parameter.name used as the list name\nAdds Mean which is simply Mean.current.value converted to numeric\n\nThese lists were then concatenated with i, so we can access them from i as follows:\n\ni$cabo_nivo_include\n\n$Parameter.description\n[1] \"Include cabo nivo? (1=yes, 0=no)\"\n\n$Parameter.name\n[1] \"cabo_nivo_include\"\n\n$Mean.current.value\n[1] \"1\"\n\n$Mean\n[1] 1\n\n\n\n\n\n\n\nManually add some extra inputs to i\n\n# Set which decision problem to look at, initially functionality has been geared towards the decision problem for cabozantinib plus nivolumab\ni$decision_problem &lt;- \"cabo+nivo\"\n\n# We then create a place for identifiers. Adding in an object to i full of lookup tables makes automated translation\n# possible even when one doesn't know the number of items ex ante, or how they combine.\n# \n# If the lookup table is correct one can translate id numbers to text strings which are\n# consistent throughout the entire model. This is extremely useful as the model can\n# be expanded to any number of treatments and potentially even any number of lines \n# (up to a reasonable maximum)\n\ni$id     &lt;- list(ipd = list())\ni$lookup &lt;- list(ipd = list())\n\n# Add distribution names to i\n# This model only includes standard parametric distributions as more complex distributions were not deemed to be required for the included treatments\n\ni$distnames &lt;- \n  c(\n    gengamma      = \"gengamma\",\n    exp           = \"exp\",\n    weibull       = \"weibull\",\n    lnorm         = \"lnorm\",\n    gamma         = \"gamma\",\n    gompertz      = \"gompertz\",\n    llogis        = \"llogis\"\n  )\n\n\n\nUse i to make another list p\nThe list p is based on i, either copying over parameters or using them to calculate new parameters. The list is first created by f_misc_param_generate_p(). A few extra additions are then made to p in this code block, such as to set a maximum of 4 treatment lines before best supportive care.\n\n# The next step is to then \"tidy up\" i into another object, p. p doesn't necessarily\n# have to house everything, only things that will change in PSA\n\np &lt;- f_misc_param_generate_p(i)\n\n# Set seed for PSA - note this is done in the script to run the PSA, not here!\n# set.seed(1475)\n\n# Max lines within the R model\np$basic$R_maxlines &lt;- 4\n\n# Pass this into p so that p can be used to exclusively compute the model:\np$basic$decision_problem &lt;- i$decision_problem\n\n\n\n\n\n\n\nWhat does f_misc_param_generate_p() do?\n\n\n\n\n\nThis function consists of relatively simple calculations using parameters from i to generate p. For the full overview of these calculations, check out the code for the function. To give an example though, the function code includes:\np &lt;- list(\n    basic = list(\n      th   = ceiling(i$ui_time_horizon * 365.25 / 7), \n      th_y = i$ui_time_horizon, \n      ...\n    )\n    ...\n)\nIn this example, we can see that is makes a copy of i$ui_time_horizon which has time horizon of model in years (40 years) (p$basic$th_y). It also converts the time horizon into weeks (p$basic$th).\n\ni$ui_time_horizon\n\n[1] 40\n\np$basic$th\n\n[1] 2088\n\np$basic$th_y\n\n[1] 40"
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#treatment-sequences",
    "href": "pages/walkthrough/code0a_walkthrough.html#treatment-sequences",
    "title": "Code walkthrough",
    "section": "Treatment sequences",
    "text": "Treatment sequences\n\nFind all possible sequences\nThe first step in determining the possible treatment sequences is to determine all possible combinations and orders of treatment, saving this as i$sequences.\n\n#### 3.2 Define sequences  ###########\n\n#### This code produces a list of possible sequences per population based upon the rules defined for RCC\n#### and the user input number of lines\n\n\n# Add drug names to comparators vector extracted from inputs list.\n\ni$sequences &lt;- f_generate_sequences(\n  comparators = i$List_comparators, \n  maxlines    = p$basic$R_maxlines\n)\n\n\n\n\n\n\n\nWhat does f_generate_sequences() do?\n\n\n\n\n\nThe input to this function is a list of all the possible treatments (14 options), and the maximum number of treatment lines (4).\n\ni$List_comparators\n\n [1] \"nivolumab_monotherapy\"         \"cabozantinib_plus_nivolumab\"  \n [3] \"nivolumab_plus_ipilimumab\"     \"lenvatinib_plus_pembrolizumab\"\n [5] \"avelumab_plus_axitinib\"        \"pazopanib\"                    \n [7] \"tivozanib\"                     \"sunitinib\"                    \n [9] \"cabozantinib\"                  \"lenvatinib_plus_everolimus\"   \n[11] \"everolimus\"                    \"axitinib\"                     \n[13] \"sorafenib\"                     \"placebo_BSC\"                  \n\n\nThe function f_generate_sequences() outputs a table saved as i$sequences. This contains every possible order and combination of treatments.\n\nkable(head(i$sequences, 3))\n\n\n\n\n\n\n\n\n\n\n\nV1\nV2\nV3\nV4\nV5\n\n\n\n\navelumab_plus_axitinib\naxitinib\ncabozantinib\ncabozantinib_plus_nivolumab\nBSC\n\n\navelumab_plus_axitinib\naxitinib\ncabozantinib\neverolimus\nBSC\n\n\navelumab_plus_axitinib\naxitinib\ncabozantinib\nlenvatinib_plus_everolimus\nBSC\n\n\n\n\ndim(i$sequences)\n\n[1] 26404     5\n\n\nThese varied from a single treatment to up to four subsequent treatments, but always ended with best supportive case (BSC).\n\nkable(head(i$sequences[i$sequences$V3==\"\",], 3))\n\n\n\n\nV1\nV2\nV3\nV4\nV5\n\n\n\n\navelumab_plus_axitinib\nBSC\n\n\n\n\n\naxitinib\nBSC\n\n\n\n\n\ncabozantinib\nBSC\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter to valid sequences\nThe table of all possible treatment sequences is then filtered down to valid sequences (for example, removing drugs if not allowed for a given population, or after another particular drug).\n\n\n# restrict the pathways to those that are possible and permitted.\ni$sequences &lt;- as.data.frame(i$sequences)\n\npopulations &lt;- i$i_nr_populations\n\nseqs &lt;- NULL\ninvisible(\n for (population in 1:populations) {\n  cat(\"Applying sequence restrictions to population\", population,\"\\n\")\n  \n  s &lt;- f_path_tx_restrict(\n    sequences                = i$sequences,\n    allowed                  = f_get_allowed_lists(i, population), #overall list of allowed drugs in this popn\n    L1                       = f_get_L1_lists(i, population), # 1L drugs allowed in this popn\n    L2                       = f_get_L2_lists(i, population), # 2L drugs allowed in this popn\n    L3                       = f_get_L3_lists(i, population), # 3L drugs allowed in this popn\n    L4                       = f_get_L4_lists(i, population), # 4L drugs allowed in this popn\n    only_after               = f_get_only_after_lists(i, population), #list of restrictions where tx can be only after the listed txs\n    not_immediate_after      = f_get_not_immediate_after_lists(i, population), #list of restrictions where tx can be only immediately before the listed txs\n    one_in_list              = f_get_one_in_list_lists(i, population), #list of restrictions where only one of the tx in each list is allowed \n    only_after_one           = f_get_only_after_one_lists(i, population), #list of restrictions where only one of the listed treatments is allowed prior to current therapy \n    L2_only_after            = f_get_2L_only_after_lists(i, population), #list of 2L+ restrictions: if drug is used 2L, 3L or 4L, can only be after drug x\n    L2_only_immediate_after  = f_get_2L_only_immediate_after_lists(i, population), #list of 2L+ restrictions: if drug is used 2L, 3L or 4L, can only be immediately after drug x\n    L2_only_one              = f_get_2L_only_one_lists(i, population) #list of 2L+ drugs where only one of them allowed in a given sequence\n  )\n  s &lt;- cbind(rep(paste0(\"pop\", population),nrow(s)), s)\n  colnames(s) &lt;- paste0('V', seq_len(ncol(s))) # rbind no longer likes un-named columns so added this\n  seqs &lt;- rbind(seqs, s)\n} \n)\nrownames(seqs) &lt;- NULL\n\ni$sequences &lt;- seqs\n\n#### Uncomment this code to view the sequences and write the sequences defined to csv\n\n# i$sequences\n# write.csv(seqs, \"4_Output/sequences.csv\", row.names = F)\nrm(s, seqs, populations)\n\n# define number of cycles and a vector of the cycles \n\n\n\n\n\n\n\nAbout the populations being looped through\n\n\n\n\n\nThis code chunk restricted to valid sequences by population. In this analysis, there are four populations defined by time since an immuno-oncology (IO) treatment, and International Metastatic Renal Cell Carcinoma Database Consortium (IMDC) risk status. They are:\n\npop1 &gt;12m since IO, favourable risk\npop2 &gt;12m since IO, intermediate/poor risk\npop3 &lt;12m since IO, favourable risk\npop4 &lt;12m since IO, intermediate/poor risk\n\nEach risk group has to be broken down by time since IO as there are five treatments that cannot be used within 12 months of an adjuvant IO treatment (4.3.5.6 in Assessment Report @lee_treatments_2023-1). An adjuvant treatment is one given alongside the primary treatment.\n\n\n\n\n\n\n\n\n\nWhat criteria are there for valid treatments?\n\n\n\n\n\n\nBy population and line\nFor each population, there are a list of valid treatments at each line of therapy (first-line through to fourth). For example, valid first-line treatments for population 1 are:\n\n# Pop1 1L treatments\nf_get_L1_lists(i, 1)\n\n[1] \"avelumab_plus_axitinib\"      \"cabozantinib_plus_nivolumab\"\n[3] \"pazopanib\"                   \"sunitinib\"                  \n[5] \"tivozanib\"                  \n\n\n\n\nOnly after\nThere are some treatments that can only come after other treatments. For example, for population 1:\n\nAxitinib can only be administered after a tyrosine kinase inhibitor (TKI) or cytokine treatment\nEverolimus can only be administered after a vascular endothelial growth factor (VEGF) treatment\nAt 2L 3L or 4L, cabozantinib can only be administered after one of the listed treatments\n\n\nf_get_only_after_lists(i, 1)\n\n$axitinib\n[1] \"avelumab_plus_axitinib\"        \"cabozantinib\"                 \n[3] \"lenvatinib_plus_everolimus\"    \"cabozantinib_plus_nivolumab\"  \n[5] \"pazopanib\"                     \"lenvatinib_plus_pembrolizumab\"\n[7] \"sunitinib\"                     \"tivozanib\"                    \n\n$everolimus\n[1] \"avelumab_plus_axitinib\"        \"axitinib\"                     \n[3] \"cabozantinib\"                  \"lenvatinib_plus_everolimus\"   \n[5] \"cabozantinib_plus_nivolumab\"   \"pazopanib\"                    \n[7] \"lenvatinib_plus_pembrolizumab\" \"sunitinib\"                    \n[9] \"tivozanib\"                    \n\nf_get_2L_only_after_lists(i, 1)\n\n$cabozantinib\n[1] \"avelumab_plus_axitinib\"        \"axitinib\"                     \n[3] \"lenvatinib_plus_everolimus\"    \"cabozantinib_plus_nivolumab\"  \n[5] \"pazopanib\"                     \"lenvatinib_plus_pembrolizumab\"\n[7] \"sunitinib\"                     \"tivozanib\"                    \n\n\n\n\nNot immediately after\nSome treatments cannot come immediately after another treatment. For example, for population 1:\n\nLenvatinib plus everolimus must not come immediately after nivolumab plus ipilimumab\nAt 2L 3L or 4L, pazopanib and sunitinib and tivozanib must not come immediately after their respective listed treatments\n\n\nf_get_not_immediate_after_lists(i, 1)\n\n$lenvatinib_plus_everolimus\n[1] \"nivolumab_plus_ipilimumab\"\n\nf_get_2L_only_immediate_after_lists(i, 1)\n\n$pazopanib\n[1] \"avelumab_plus_axitinib\"        \"lenvatinib_plus_pembrolizumab\"\n[3] \"cabozantinib_plus_nivolumab\"   \"nivolumab_plus_ipilimumab\"    \n\n$sunitinib\n[1] \"avelumab_plus_axitinib\"        \"lenvatinib_plus_pembrolizumab\"\n[3] \"cabozantinib_plus_nivolumab\"   \"nivolumab_plus_ipilimumab\"    \n\n$tivozanib\n[1] \"avelumab_plus_axitinib\"        \"lenvatinib_plus_pembrolizumab\"\n[3] \"cabozantinib_plus_nivolumab\"   \"nivolumab_plus_ipilimumab\"    \n\n\n\n\nOnly one from list\nSome treatments are not allowed if another has already been given at any point prior.\nFor example, for population 1 there are five lists of treatments where only one treatment from each list is allowed.\nThere are no restrictions like this for population 1 specific to just 2L 3L or 4L treatments (hence, empty list).\n\nf_get_one_in_list_lists(i, 1)\n\n$axitinib\n[1] \"avelumab_plus_axitinib\" \"axitinib\"              \n\n$cabozantinib\n[1] \"cabozantinib\"                \"cabozantinib_plus_nivolumab\"\n\n$everolimus\n[1] \"lenvatinib_plus_everolimus\" \"everolimus\"                \n\n$io\n[1] \"avelumab_plus_axitinib\"        \"nivolumab_plus_ipilimumab\"    \n[3] \"cabozantinib_plus_nivolumab\"   \"nivolumab_monotherapy\"        \n[5] \"lenvatinib_plus_pembrolizumab\"\n\n$nivolumab\n[1] \"nivolumab_plus_ipilimumab\"   \"cabozantinib_plus_nivolumab\"\n[3] \"nivolumab_monotherapy\"      \n\n$TKIs\n[1] \"sunitinib\" \"pazopanib\" \"tivozanib\"\n\nf_get_2L_only_one_lists(i, 1)\n\nnamed list()\n\n\n\n\nOnly one allowed before\nIn other cases, a treatment is not allowed if more than one of a particular category of treatment has been given. For example, for population 1:\n\nOf the listed treatments, only one is allowed before lenvatinib plus everolimus\n\n\nf_get_only_after_one_lists(i, 1)\n\n$lenvatinib_plus_everolimus\n[1] \"avelumab_plus_axitinib\"        \"axitinib\"                     \n[3] \"cabozantinib\"                  \"cabozantinib_plus_nivolumab\"  \n[5] \"pazopanib\"                     \"lenvatinib_plus_pembrolizumab\"\n[7] \"sunitinib\"                     \"tivozanib\"                    \n\n\n\n\n\n\n\n\n\n\n\n\nWhat does f_path_tx_restrict() do?\n\n\n\n\n\nThe function f_path_tx_restrict() is defined in sequences.R (there is also a function of the same name in rccFunctions.R but this is not sourced).\nIts purpose is to restrict the table of all possible sequences to just the valid sequences for each population, restricting it from 26404 rows with possible treatment sequences to just 744.\n\ndim(i$sequences)\n\n[1] 26404     5\n\n\nThe inputs to this function are lists defining valid treatments by different criteria (e.g. line of therapy, subsequent treatments), as detailed in the note above.\nWithin f_path_tx_restrict(), there are then several other functions which take these lists and use them to remove invalid sequences from the table.\nFor example, the allowed treatments identified using f_get_allowed_lists() are input to f_path_tx_restrict() as allowed. The function f_path_allowed() then uses that list to remove invalid drugs for a given population:\ns &lt;- f_path_allowed(s, allowed[[1]])\nLooking at an excerpt of the code for f_path_allowed(), we can see that is adds “BSC” and no treatment (““) as valid options, and then only keeps rows if their treatments are in (%in%) the list of valid treatments.\nrule &lt;- c(rule, \"BSC\", \"\")\n\nfor (n in 1:ncol(perms)) {\n  perms &lt;- perms[perms[,n] %in% rule,]\n}\n\n\n\n\n\n\n\n\n\nView the sequence restrictions applied\n\n\n\n\n\n\n\nApplying sequence restrictions to population 1 \nDropping drugs not allowed for this population.\napplying rule: avelumab_plus_axitinib axitinib cabozantinib everolimus lenvatinib_plus_everolimus cabozantinib_plus_nivolumab nivolumab_monotherapy pazopanib sunitinib tivozanib are only allowed treatments.\nPermutations before applying rule: 26404 \nPermutations after applying rule : 5860 \napplying rule: drug line restrictions.\nPermutations before applying rule: 5860 \nPermutations after applying rule : 628 \n[1] \"axitinib\"\napplying rule. axitinib is only allowed after avelumab_plus_axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 628 \nPermutations after applying rule : 628 \n[1] \"everolimus\"\napplying rule. everolimus is only allowed after avelumab_plus_axitinib axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 628 \nPermutations after applying rule : 628 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule. lenvatinib_plus_everolimus is not allowed immediately after nivolumab_plus_ipilimumab \nPermutations before applying rule: 628 \nPermutations after applying rule : 628 \n[1] \"axitinib\"\napplying rule axitinib : avelumab_plus_axitinib axitinib cannot be in one permutation\nPermutations before applying rule: 628 \nPermutations after applying rule : 559 \n[1] \"cabozantinib\"\napplying rule cabozantinib : cabozantinib cabozantinib_plus_nivolumab cannot be in one permutation\nPermutations before applying rule: 559 \nPermutations after applying rule : 520 \n[1] \"everolimus\"\napplying rule everolimus : lenvatinib_plus_everolimus everolimus cannot be in one permutation\nPermutations before applying rule: 520 \nPermutations after applying rule : 452 \n[1] \"io\"\napplying rule io : avelumab_plus_axitinib nivolumab_plus_ipilimumab cabozantinib_plus_nivolumab nivolumab_monotherapy lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 452 \nPermutations after applying rule : 400 \n[1] \"nivolumab\"\napplying rule nivolumab : nivolumab_plus_ipilimumab cabozantinib_plus_nivolumab nivolumab_monotherapy cannot be in one permutation\nPermutations before applying rule: 400 \nPermutations after applying rule : 400 \n[1] \"TKIs\"\napplying rule TKIs : sunitinib pazopanib tivozanib cannot be in one permutation\nPermutations before applying rule: 400 \nPermutations after applying rule : 202 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule: lenvatinib_plus_everolimus can only be after ONE of avelumab_plus_axitinib axitinib cabozantinib cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 202 \nPermutations after applying rule : 182 \n[1] \"cabozantinib\"\napplying rule: cabozantinib as 2L+ only allowed after avelumab_plus_axitinib axitinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 182 \nPermutations after applying rule : 182 \n[1] \"pazopanib\"\napplying rule: pazopanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 182 \nPermutations after applying rule : 172 \n[1] \"sunitinib\"\napplying rule: sunitinib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 172 \nPermutations after applying rule : 162 \n[1] \"tivozanib\"\napplying rule: tivozanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 162 \nPermutations after applying rule : 152 \nApplying sequence restrictions to population 2 \nDropping drugs not allowed for this population.\napplying rule: avelumab_plus_axitinib axitinib cabozantinib everolimus nivolumab_plus_ipilimumab lenvatinib_plus_everolimus cabozantinib_plus_nivolumab nivolumab_monotherapy pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib are only allowed treatments.\nPermutations before applying rule: 26404 \nPermutations after applying rule : 13344 \napplying rule: drug line restrictions.\nPermutations before applying rule: 13344 \nPermutations after applying rule : 1036 \n[1] \"axitinib\"\napplying rule. axitinib is only allowed after avelumab_plus_axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 1036 \nPermutations after applying rule : 1017 \n[1] \"everolimus\"\napplying rule. everolimus is only allowed after avelumab_plus_axitinib axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 1017 \nPermutations after applying rule : 1004 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule. lenvatinib_plus_everolimus is not allowed immediately after nivolumab_plus_ipilimumab \nPermutations before applying rule: 1004 \nPermutations after applying rule : 984 \n[1] \"axitinib\"\napplying rule axitinib : avelumab_plus_axitinib axitinib cannot be in one permutation\nPermutations before applying rule: 984 \nPermutations after applying rule : 915 \n[1] \"cabozantinib\"\napplying rule cabozantinib : cabozantinib cabozantinib_plus_nivolumab cannot be in one permutation\nPermutations before applying rule: 915 \nPermutations after applying rule : 876 \n[1] \"everolimus\"\napplying rule everolimus : lenvatinib_plus_everolimus everolimus cannot be in one permutation\nPermutations before applying rule: 876 \nPermutations after applying rule : 773 \n[1] \"io\"\napplying rule io : avelumab_plus_axitinib nivolumab_plus_ipilimumab cabozantinib_plus_nivolumab nivolumab_monotherapy lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 773 \nPermutations after applying rule : 657 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule lenvatinib_plus_everolimus : lenvatinib_plus_everolimus lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 657 \nPermutations after applying rule : 638 \n[1] \"nivolumab\"\napplying rule nivolumab : nivolumab_plus_ipilimumab cabozantinib_plus_nivolumab nivolumab_monotherapy cannot be in one permutation\nPermutations before applying rule: 638 \nPermutations after applying rule : 638 \n[1] \"TKIs\"\napplying rule TKIs : sunitinib pazopanib tivozanib cannot be in one permutation\nPermutations before applying rule: 638 \nPermutations after applying rule : 386 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule: lenvatinib_plus_everolimus can only be after ONE of avelumab_plus_axitinib axitinib cabozantinib cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 386 \nPermutations after applying rule : 359 \n[1] \"cabozantinib\"\napplying rule: cabozantinib as 2L+ only allowed after avelumab_plus_axitinib axitinib nivolumab_plus_ipilimumab lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 359 \nPermutations after applying rule : 359 \n[1] \"pazopanib\"\napplying rule: pazopanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 359 \nPermutations after applying rule : 339 \n[1] \"sunitinib\"\napplying rule: sunitinib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 339 \nPermutations after applying rule : 319 \n[1] \"tivozanib\"\napplying rule: tivozanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 319 \nPermutations after applying rule : 299 \nApplying sequence restrictions to population 3 \nDropping drugs not allowed for this population.\napplying rule: axitinib cabozantinib everolimus lenvatinib_plus_everolimus nivolumab_monotherapy pazopanib sunitinib tivozanib are only allowed treatments.\nPermutations before applying rule: 26404 \nPermutations after applying rule : 2080 \napplying rule: drug line restrictions.\nPermutations before applying rule: 2080 \nPermutations after applying rule : 330 \n[1] \"axitinib\"\napplying rule. axitinib is only allowed after avelumab_plus_axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 330 \nPermutations after applying rule : 330 \n[1] \"everolimus\"\napplying rule. everolimus is only allowed after avelumab_plus_axitinib axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 330 \nPermutations after applying rule : 330 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule. lenvatinib_plus_everolimus is not allowed immediately after nivolumab_plus_ipilimumab \nPermutations before applying rule: 330 \nPermutations after applying rule : 330 \n[1] \"axitinib\"\napplying rule axitinib : avelumab_plus_axitinib axitinib cannot be in one permutation\nPermutations before applying rule: 330 \nPermutations after applying rule : 330 \n[1] \"everolimus\"\napplying rule everolimus : lenvatinib_plus_everolimus everolimus cannot be in one permutation\nPermutations before applying rule: 330 \nPermutations after applying rule : 288 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule lenvatinib_plus_everolimus : lenvatinib_plus_everolimus lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 288 \nPermutations after applying rule : 288 \n[1] \"TKIs\"\napplying rule TKIs : sunitinib pazopanib tivozanib cannot be in one permutation\nPermutations before applying rule: 288 \nPermutations after applying rule : 120 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule: lenvatinib_plus_everolimus can only be after ONE of axitinib cabozantinib pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 120 \nPermutations after applying rule : 111 \n[1] \"cabozantinib\"\napplying rule: cabozantinib as 2L+ only allowed after avelumab_plus_axitinib axitinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 111 \nPermutations after applying rule : 111 \n[1] \"pazopanib\"\napplying rule: pazopanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 111 \nPermutations after applying rule : 111 \n[1] \"sunitinib\"\napplying rule: sunitinib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 111 \nPermutations after applying rule : 111 \n[1] \"tivozanib\"\napplying rule: tivozanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 111 \nPermutations after applying rule : 111 \nApplying sequence restrictions to population 4 \nDropping drugs not allowed for this population.\napplying rule: axitinib cabozantinib everolimus lenvatinib_plus_everolimus nivolumab_monotherapy pazopanib sunitinib tivozanib are only allowed treatments.\nPermutations before applying rule: 26404 \nPermutations after applying rule : 2080 \napplying rule: drug line restrictions.\nPermutations before applying rule: 2080 \nPermutations after applying rule : 440 \n[1] \"axitinib\"\napplying rule. axitinib is only allowed after avelumab_plus_axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 440 \nPermutations after applying rule : 440 \n[1] \"everolimus\"\napplying rule. everolimus is only allowed after avelumab_plus_axitinib axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 440 \nPermutations after applying rule : 440 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule. lenvatinib_plus_everolimus is not allowed immediately after nivolumab_plus_ipilimumab \nPermutations before applying rule: 440 \nPermutations after applying rule : 440 \n[1] \"axitinib\"\napplying rule axitinib : avelumab_plus_axitinib axitinib cannot be in one permutation\nPermutations before applying rule: 440 \nPermutations after applying rule : 440 \n[1] \"everolimus\"\napplying rule everolimus : lenvatinib_plus_everolimus everolimus cannot be in one permutation\nPermutations before applying rule: 440 \nPermutations after applying rule : 384 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule lenvatinib_plus_everolimus : lenvatinib_plus_everolimus lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 384 \nPermutations after applying rule : 384 \n[1] \"TKIs\"\napplying rule TKIs : sunitinib pazopanib tivozanib cannot be in one permutation\nPermutations before applying rule: 384 \nPermutations after applying rule : 198 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule: lenvatinib_plus_everolimus can only be after ONE of axitinib cabozantinib pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 198 \nPermutations after applying rule : 182 \n[1] \"cabozantinib\"\napplying rule: cabozantinib as 2L+ only allowed after avelumab_plus_axitinib axitinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 182 \nPermutations after applying rule : 182 \n[1] \"pazopanib\"\napplying rule: pazopanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 182 \nPermutations after applying rule : 182 \n[1] \"sunitinib\"\napplying rule: sunitinib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 182 \nPermutations after applying rule : 182 \n[1] \"tivozanib\"\napplying rule: tivozanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 182 \nPermutations after applying rule : 182 \n\n\n\n\n\nSPLITMD_CODE1_END\nSPLITMD_CODE2_START\nThis page performs a partitioned survival analysis on the patient-level data, which is real-world evidence (RWE) sent by the data owners for that observational study. The analysis is performed in order to extrapolate the survival curves so they cover the full time horizon of the economic model (40 years)."
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#import-patient-level-data",
    "href": "pages/walkthrough/code0a_walkthrough.html#import-patient-level-data",
    "title": "Code walkthrough",
    "section": "Import patient-level data",
    "text": "Import patient-level data\nThe patient-level data (or individual patient data (IPD)) is imported from IPD_R_input_noACIC.xlsx. This data has a row for each statement which states their population, line, treatment and trial, and then the time taken for them to experience an endpoint (e.g. overall survival) or be censored (i.e. stopped timing for some other reason). For more information, see the Input data page.\nThe data is imported using f_excel_extract() which produces the object wb which is a list with a single item: the table from the IPD sheet of the workbook. The code chunk converts this to a data table and filters it just the relevant columns.\nAs a survival time of 0 is not allowed, these are converted to 1 day (hence, 1/7 as the time unit of the analysis is weeks).\n\n# 3.3. Survival analysis -------------------------------------------------------\n\n# All objects here go in i$surv initially, and are then streamlined down to \n# what's needed to run models in the transition from i to p.\n# \n# Some values of p are used during the below (primarily p$surv$distNames, which\n# controls which distributions are included in the flexsurv runs)\n\n\n# 3.3.1 Survival input structure ------------------------------------------\n\ni$surv &lt;- list()\n\n#### Read in survival data from Excel workbook \n\n# Pull out the raw data from the IPD excel book - one named range per treatment at each line\n# Each reference curve is defined in Excel as time (weeks), event/censor (event coded as 1, censor as 0), patient group, line, molecule, trial and endpoint\n# Pull all of the named ranges from the excel workbook, expand the parameters table\n\nexcel_path2 &lt;- file.path(d_path, \"IPD_R_input_noACIC.xlsx\")\nif (file.exists(excel_path2)) {\n  wb &lt;- f_excel_extract(excel_path2, verbose = TRUE)\n  i$surv$pld &lt;- as.data.table(wb$`_xlnm._FilterDatabase`)\n  rm(wb)\n} else {\n  wb &lt;- f_excel_extract(rstudioapi::selectFile(\n    caption = \"Select the IPD file (IPD_R_input_noACIC.xlsx)\",\n    label = \"IPD_R_input_noACIC.xlsx\",\n    path = \"./1_Data/\",\n    filter = \"Excel Files (*.xlsx)\",\n    existing = TRUE\n  ), verbose = TRUE)\n  i$surv$pld &lt;- as.data.table(wb$`_xlnm._FilterDatabase`)\n  \n}\n\n\n# Some small cleaning of the PLD.\ni$surv$pld &lt;- i$surv$pld[,list(population,line,molecule,trial,endpoint,timew,event_censor)]\n\n# Do not allow zero survival times, they have to be at least 1 day. the TUotA is\n# weeks, so 1 day is 1/7 weeks:\ni$surv$pld[timew ==0,\"timew\"] &lt;- 1/7\n\n# The named range r_pld has numeric identifiers for:\n# \n# - pop\n# - line\n# - mol (i.e., regimen - combination therapies are under the same number)\n# - trial (trial id WITHIN population line and molecule to set them apart from each other - usually just 1!)\n# - endpoint\n\n# These numeric identifiers are then used to create a nested list of survival regression models and\n# extrapolations. The extrapolations are filtered down to the extrapolations that are selected\n# within the excel input sheet, but the rest are kept here in i in case of scenario analysis.\n# \n# Note that the lookup tables in the next section are used to translate these numbers\n# into human-readable identifiers.\n\n\n\n\n\n\n\nPreview i$surv$pld\n\n\n\n\n\n\nkable(head(i$surv$pld))\n\n\n\n\npopulation\nline\nmolecule\ntrial\nendpoint\ntimew\nevent_censor\n\n\n\n\n0\n1\n1\n0\n0\n205.28572\n1\n\n\n0\n1\n1\n0\n0\n40.00357\n0\n\n\n0\n1\n1\n0\n0\n145.42857\n0\n\n\n0\n1\n1\n0\n0\n108.85714\n1\n\n\n0\n1\n1\n0\n0\n86.85714\n1\n\n\n0\n1\n1\n0\n0\n53.42857\n0"
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#create-look-ups-to-convert-between-numeric-categories-and-labels",
    "href": "pages/walkthrough/code0a_walkthrough.html#create-look-ups-to-convert-between-numeric-categories-and-labels",
    "title": "Code walkthrough",
    "section": "Create look-ups to convert between numeric categories and labels",
    "text": "Create look-ups to convert between numeric categories and labels\n\n# 3.3.2 Data identification ------------------------------------------\n\n# There is a lot of nesting involved in this part of the analysis, with population line, regimen trial and endpoint\n# making a total of 5 layers of nesting to automatically go through each endpoint for each trial for\n# each regimen for each line for each population, perform all regression analyses, produce parameters\n# and have an easily identifiable (and therefore programmable) spaces for the results of each analysis\n# which can then be spat out into reporting.\n\n# The first step is to break up r_pld into separate datasets depending on the identifiers. A function\n# is used to do this which returns nothing if such data for one id set doesn't exist. \n# \n# Note that at this stage it is just those contexts which HAVE got PLD which are to be organised.\n# For those endpoints and so on that do not have data, a separate step after this one to populate \n# every endpoint for every treatment line for every treatment sequence is performed.\n\ni$id$ipd &lt;- list(\n  pop      = i$r_pld_lookup_pop$Number[!is.na(i$r_pld_lookup_pop$Number)],\n  line     = i$r_pld_lookup_line$Number[!is.na(i$r_pld_lookup_line$Number)],\n  mol      = i$r_pld_lookup_mol$Number[!is.na(i$r_pld_lookup_mol$Number)],\n  trial    = i$r_pld_lookup_trial$Number[!is.na(i$r_pld_lookup_trial$Number)],\n  endpoint = i$r_pld_lookup_endpoint$Number[!is.na(i$r_pld_lookup_endpoint$Number)]\n)\n\nnames(i$id$ipd$pop)      &lt;- paste0(\"pop_\"     , i$id$ipd$pop)\nnames(i$id$ipd$line)     &lt;- paste0(\"line_\"    , i$id$ipd$line)\nnames(i$id$ipd$mol)      &lt;- paste0(\"mol_\"     , i$id$ipd$mol)\nnames(i$id$ipd$trial)    &lt;- paste0(\"trial_\"   , i$id$ipd$trial)\nnames(i$id$ipd$endpoint) &lt;- paste0(\"endpoint_\", i$id$ipd$endpoint)\n\n\n# to see this, we have:\n#i$id$ipd\n\n# Generating the same structure but with the translation table from number to\n# text:\n\ni$lookup$ipd &lt;- list(\n  pop      = data.table(i$r_pld_lookup_pop)[Description != 0],\n  line     = data.table(i$r_pld_lookup_line)[Description != 0],\n  mol      = data.table(i$r_pld_lookup_mol)[Description != 0],\n  trial    = data.table(i$r_pld_lookup_trial)[Description != 0],\n  endpoint = data.table(i$r_pld_lookup_endpoint)[Description != 0]\n)\n\n# For treatment line, add a translator for the column in the sequences output:\n\ni$lookup$ipd$line$seq_col &lt;- paste0(\"V\",2:(nrow(i$lookup$ipd$line)+1))\ni$lookup$ipd$line$R_id    &lt;- paste0(\"line_\",1:nrow(i$lookup$ipd$line))\n\ni$lookup$dist &lt;- i$r_pld_lookup_dist\n\n\n# This means that you can easily look up things like so:\n\n# i$lookup$ipd$mol[Number == 1,list(Description,RCC_input_desc)]\n# i$lookup$ipd$mol[Number == 2,list(Description,RCC_input_desc)]\n# i$lookup$ipd$line[Number == 1,list(Description,RCC_input_desc)]\n# i$lookup$ipd$pop[Number == 0,list(Description,RCC_input_desc)]\n\n# One can also do the opposite, translating input file descriptions into numbers:\n\n# i$lookup$ipd$mol[RCC_input_desc == \"ipi_nivo\",list(Description,Number)]\n\ni$lookup$trt &lt;- i$lookup$ipd$mol$Number\nnames(i$lookup$trt) &lt;- i$lookup$ipd$mol$RCC_input_desc\nnames(i$lookup$trt)[length(i$lookup$trt)] &lt;- \"BSC\""
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#further-pre-processing-before-survival-analysis",
    "href": "pages/walkthrough/code0a_walkthrough.html#further-pre-processing-before-survival-analysis",
    "title": "Code walkthrough",
    "section": "Further pre-processing before survival analysis",
    "text": "Further pre-processing before survival analysis\n\n# pass to p whenever i$lookup has been populated/updated.\np$basic$lookup &lt;- i$lookup\np$basic$id &lt;- i$id\n\n# one can then simply i$lookup$trt[\"nivolumab\"] or i$lookup$trt[\"sorafenib\"] to \n# get the id numbers.\n\n# This then means that one can translate the treatment sequence data generated earlier\n# into numerical versions in one go:\n\n# Start by making the id for population fit with the rest of the model (pop_ with pop\n# starting from 0). NOTE that there is 1 more population in treatment sequences than\n# in the rest of the model...\n\ni$seq_clean &lt;- data.table(i$sequences)\n\ni$seq_clean$V1 &lt;- paste0(\"pop_\",as.numeric(substr(i$seq_clean$V1,4,4)) - 1)\n\ni$seq_pops &lt;- unique(i$seq_clean$V1)\nnames(i$seq_pops) &lt;- i$seq_pops\n\n# The \"clean\" version of sequences - first with words, then with numbers, then references\n\ni$seq_clean &lt;- lapply(i$seq_pops, function(popu) {\n  tmp &lt;- i$seq_clean[V1 == popu,-1]\n  colnames(tmp) &lt;- i$lookup$ipd$line$R_id[1:(p$basic$R_maxlines + 1)]\n  tmp\n})\n\n# It's pretty nested this but simplifies upon explanation: lapply on a data.frame\n# or data.table goes column-wise, so going across columns substitute the values\n# for the values in i$lookup$trt which have corresponding names, returning the numbers\n# which are consistent throughout the model. The way of looking inside e.g. network\n# is e.g. pop_2$line_5$mol_2$endpoint_1, so now we can use the tables produced below\n# to \"order\" the inputs for a treatment pathway \ni$seq_n &lt;- lapply(i$seq_clean, function(popu) {\n  as.data.table(lapply(popu, function(co) i$lookup$trt[co]))\n})\ni$seq_ref &lt;- lapply(i$seq_clean, function(popu) {\n  tmp &lt;- as.data.table(lapply(popu, function(co) {\n    vals &lt;- paste0(\"mol_\",i$lookup$trt[co])\n    ifelse(vals == \"mol_NA\",NA,vals)\n  }))\n})\n\n\n# Now that we have the final sequence list, we can add them to p:\n\np$seq$n   &lt;- i$seq_n\np$seq$ref &lt;- i$seq_ref\np$seq$qc &lt;- i$seq_clean\n\n# NOTE: QC check here is for NAs that are not beyond a 999 (i.e. past BSC)\n\n# We now have all the treatment sequences in the form of the molecule\n# number and the consistent reference linking right back to the named range\n# r_pld_lookup_mol in the excel front end. This ensures that the R model is\n# consistent with the R model in terms of which drugs are feeding through\n# to different places, as manually checking that is a very difficult and time \n# consuming task.\n# \n# Long story short:\n# \n#  - i$seq_clean: names of treatments per excel front end in order for all populations. use i$lookup$ipd$mol as reference table.\n#  - i$seq_n: corresponding treatment numbers per named range r_pld_lookup_mol in excel\n#  - i$seq_ref: reference name for pulling things out of R lists (e.g. p$drug[unlist(i$seq_ref$pop_0[1,])]) pulls pop 0 first sequence drug info IN ORDER :)\n#\n# This is automatically in line with the reference tables in the excel front end\n# loaded at the time. If the ordering is changed there it needs updating in the IPD\n# and in the lookup tables in the lists sheet of excel (and throughout excel!)\n# \n# \n# \n# i.e, if Excel lookup tables are wrong, this will be wrong!!!\n# \n# \n\n\n# 3.3.3 TSD14 survival analysis ------------------------------------------\n\n# Now that treatment sequences are brought in and cleaned up ready for use, we\n# can perform the survival analysis.\n# \n# Use the function in Survival_functions.R to perform \"simple\" extrapolations\n# on all pop line mol trial endpoint combinations with available data and return\n# NULL for the rest\n\n# Let's  perform some labelling like we did for treatment sequences for convenience/QC\n\ni$surv$lab_pld &lt;- list()\n\ni$surv$lab_pld$population &lt;- i$lookup$ipd$pop$Number\nnames(i$surv$lab_pld$population) &lt;- i$lookup$ipd$pop$Description\n\ni$surv$lab_pld$line &lt;- i$lookup$ipd$line$Number\nnames(i$surv$lab_pld$line) &lt;- i$lookup$ipd$line$Description\n\ni$surv$lab_pld$molecule &lt;- i$lookup$ipd$mol$Number\nnames(i$surv$lab_pld$molecule) &lt;- i$lookup$ipd$mol$Description\n\ni$surv$lab_pld$trial &lt;- i$lookup$ipd$trial$Number\nnames(i$surv$lab_pld$trial) &lt;- i$lookup$ipd$trial$Description\n\ni$surv$lab_pld$endpoint &lt;- i$lookup$ipd$endpoint$Number\nnames(i$surv$lab_pld$endpoint) &lt;- i$lookup$ipd$endpoint$Description\n\n\n# Now, put the data in a space and replace numbers with labels:\n\ni$surv$lab_pld$dat &lt;- i$surv$pld\ni$surv$lab_pld$dat$population &lt;- names(i$surv$lab_pld$population)[match(i$surv$lab_pld$dat$population,i$surv$lab_pld$population)]\ni$surv$lab_pld$dat$line       &lt;- names(i$surv$lab_pld$line)[match(i$surv$lab_pld$dat$line,i$surv$lab_pld$line)]\ni$surv$lab_pld$dat$molecule   &lt;- names(i$surv$lab_pld$molecule)[match(i$surv$lab_pld$dat$molecule,i$surv$lab_pld$molecule)]\ni$surv$lab_pld$dat$trial      &lt;- names(i$surv$lab_pld$trial)[match(i$surv$lab_pld$dat$trial,i$surv$lab_pld$trial)]\ni$surv$lab_pld$dat$endpoint   &lt;- names(i$surv$lab_pld$endpoint)[match(i$surv$lab_pld$dat$endpoint,i$surv$lab_pld$endpoint)]\n\n# Now we have a labelled version which is a bit easier to QC.\n\n# Note to debug it is very helpful to set verbose to TRUE below so that you can identify\n# the datasets which are problematic (e.g. not converging, 0 time values)\n\ni$surv$n_by_plmte &lt;- i$surv$pld[, .N, by = list(population, line,molecule,trial,endpoint)] %&gt;%\n  arrange(population,line, molecule,trial,endpoint)\n\ni$surv$n_by_plmte$population &lt;- i$lookup$ipd$pop[match(i$surv$n_by_plmte$population       ,i$lookup$ipd$pop$Number),Description]\ni$surv$n_by_plmte$line       &lt;- i$lookup$ipd$line[match(i$surv$n_by_plmte$line       ,i$lookup$ipd$line$Number),Description]\ni$surv$n_by_plmte$molecule   &lt;- i$lookup$ipd$mol[match(i$surv$n_by_plmte$molecule       ,i$lookup$ipd$mol$Number),Description]\ni$surv$n_by_plmte$molecule[which(is.na(i$surv$n_by_plmte$molecule))]   &lt;- \"Non-UK treatments (pooled)\"\ni$surv$n_by_plmte$trial      &lt;- i$lookup$ipd$trial[match(i$surv$n_by_plmte$trial       ,i$lookup$ipd$trial$Number),Description]\ni$surv$n_by_plmte$endpoint   &lt;- i$lookup$ipd$endpoint[match(i$surv$n_by_plmte$endpoint       ,i$lookup$ipd$endpoint$Number),Description]\n\n# The number of rows in this table is the number of SETS of regression analyses\n# that are going to be run (each is 7 regressions)"
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#run-model",
    "href": "pages/walkthrough/code0a_walkthrough.html#run-model",
    "title": "Code walkthrough",
    "section": "Run model",
    "text": "Run model\n\n# The below code runs the survival analysis and saves as an RDS file for upload, this will only run if you set \n# i$dd_run_surv_reg to \"Yes\" either in the Excel input or here\n\nif (i$dd_run_surv_reg == \"Yes\") {\n  \n  i$surv$reg &lt;- f_surv_runAllTSD14(\n    r_pld             = i$surv$pld,\n    id                = i$id$ipd,\n    lookups           = i$lookup$ipd,\n    draw_plots        = FALSE,\n    distnames         = i$distnames,\n    cl_y              = p$basic$cl_y,\n    t_cyc             = p$basic$t_cyc,\n    xlim_survplots_yr = p$misc$plot$xlim_survplots_yr,\n    t_yr              = p$basic$t_yr,\n    verbose           = qc_mode,\n    min_obs           = 28\n  )\n  \n  # now, there is very little information available on BSC overall survival,\n  # for those people that decide they do not want further treatment\n  #\n  # The best data available currently is pooled PPS data on 4L patients, these\n  # are then 5L+ patients and given that there are currently 4 lines of therapy\n  # the proportion that receive something active subsequently is likely to be\n  # small. Consequently, this is likely a pooled analysis which can inform\n  # early (and 5L) BSC OVERALL SURVIVAL.\n  #\n  # Therefore the molecule 999 4th line PPS should be informed by a pooled analysis\n  # of all molecules' PPS at 4th line. That is, i$surv$pld[line == 4 & trial == 2 & endpoint == 4,]\n  # is the data that should inform endpoint 0 for all BSC.\n  \n  # MANUALLY RUN SURVIVAL FOR BSC PPS AS POOLED!!!\n  \n  i$surv$reg$pop_0$line_4$mol_999$trial_2$endpoint_4 &lt;- lapply(1:1,function(x) {\n    \n    # Filter down to the parameters above associated with this combination:\n    ipd &lt;- i$surv$pld[line==4 & endpoint==4,list(timew,event_censor)]\n    \n    names(ipd) &lt;- c(\"t\",\"e\")\n    \n    cat(paste0(\n      \"Survival analysis - population: \", i$lookup$ipd$pop[Number      == 0, Description],\n      \"\\t line: \"                       , i$lookup$ipd$line[Number     == 4, Description],\n      \"\\t molecule: \"                   , i$lookup$ipd$mol[Number     == 999, Description],\n      \"\\t trial: \"                      , i$lookup$ipd$trial[Number     == 2, Description],\n      \"\\t endpoint: \"                   , i$lookup$ipd$endpoint[Number == 4, Description], \"\\n\"\n    ))\n    \n    fs_fits &lt;- lapply(i$distnames, function(dist) {  # applying all parametric survival curves in the list of distNames\n      fs_fit &lt;- flexsurvreg(\n        formula = Surv(t, e) ~ 1,\n        data = ipd,\n        dist = dist\n      )\n      return(list(\n        coefs = coefficients(fs_fit),                                         # coefficients for the fitted model\n        vcov  = vcov(fs_fit),                                                 # variance covariance matrix for the fitted model\n        fit   = c(AIC= AIC(fs_fit), BIC=BIC(fs_fit), logLik = logLik(fs_fit)) # goodness of fit statistics for the fitted model\n      ))\n    })\n    \n    gof &lt;- do.call(rbind, lapply(i$distnames, function(dist) fs_fits[[dist]]$fit))\n    \n    st &lt;- matrix(\n      unlist(lapply(i$distnames, function(dist) {\n        f_extrapolate(p$basic$t_cyc, fs_fits[[dist]]$coefs, dist)\n      })),\n      ncol = length(i$distnames),\n      dimnames = list(NULL, i$distnames),\n      byrow = FALSE\n    )\n    \n    \n    # curly braces on their own mean do this stuff and only return the last thing\n    # or what's in a return call\n    plot &lt;- {\n      # First the IPD is produced in a format that survminer will accept. Data must all be\n      # the same format with the same column names.\n      # this assumes no covariate adjustment\n      \n      sm_ipd &lt;- f_ce_km_MakeDatSurvFriendly(\n        Data_required = ipd,\n        time_column   = \"t\",                 # note that this is taking IPD in weeks\n        event_column  = \"e\",\n        t_multiplier  = p$basic$cl_y             # data in weeks, cycle length in plot years\n      )\n      \n      # get the survival analysis in the form we need for survminer\n      # and make the extrapolations we need for survminer\n      \n      form          &lt;- Surv(t, ec) ~ 1\n      sm_surv_est   &lt;- surv_fit(formula = form, data = sm_ipd)\n      \n      # make the plot with the input data:\n      survival_plot &lt;- suppressMessages(f_extrap_plot(\n        SurvEstimate   = sm_surv_est,\n        Data_required  = sm_ipd,\n        curvefits_data = st,\n        time_vector    = p$basic$t_yr,\n        xlim           = p$misc$plot$xlim_survplots_yr,   #### this will need replacing dependent on how many years we decide to show per time horizon\n        break_by       = round(20/8,0) #### this will need replacing dependent on how many years we decide to show per time horizon\n      ))\n      list(\n        ipd     = sm_ipd,\n        formula = form,\n        plot    = survival_plot\n      )\n    }\n    \n    \n    # Now that we've done everything for this dataset, return a list of the stuff\n    # we need for it:\n    return(list(\n      pop      = i$lookup$ipd$pop[     Number == 0,Description],\n      line     = i$lookup$ipd$line[    Number == 4,Description],\n      mol      = i$lookup$ipd$mol[     Number == 999,Description],\n      tr       = i$lookup$ipd$trial[     Number == 2,Description],\n      endpoint = i$lookup$ipd$endpoint[Number == 4,Description],\n      ipd      = ipd,\n      fs_fits  = fs_fits,\n      gof      = gof,\n      st       = st,\n      plot     = plot\n    ))\n  })[[1]]\n  \n  saveRDS(i$surv$reg, file = file.path(d_path, \"Survival_analysis.rds\"))\n  \n}"
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#load-pre-run-survival-analysis",
    "href": "pages/walkthrough/code0a_walkthrough.html#load-pre-run-survival-analysis",
    "title": "Code walkthrough",
    "section": "Load pre-run survival analysis",
    "text": "Load pre-run survival analysis\n\n# to load in pre-run survival analysis select the RDS file here\n\n# option to load from pre-specified file path on local machine, uncomment this and comment out the line below to use\n\nRDS_path &lt;- file.path(d_path, \"survival_analysis_no_ipd_CompanyTTDTTPPPS_redacted.rds\")\nif (file.exists(RDS_path)) {\n  i$surv$reg &lt;- readRDS(RDS_path)\n} else {\n  i$surv$reg &lt;- readRDS(rstudioapi::selectFile(\n    caption = \"Please select 'Survival_analysis_noTTDorTTPorPPS[NoACIC].rds'\",\n    label = \"Survival_analysis_noTTDorTTPorPPS[NoACIC].rds\",\n    path = \"./1_Data/\",\n    filter = \"R Files (*.rds)\",\n    existing = TRUE\n  ))\n}\n\n\n# Limit to model time horizon\n\nTH &lt;- p$basic$th + 1\n\ni$surv$reg &lt;-lapply(i$surv$reg, function(popu) {\n  lapply(popu, function(li) {\n    lapply(li, function(mol) {\n      lapply(mol, function(tr) {\n        lapply(tr, function(endp) {\n          if (is.null(endp$st)) {\n            return(endp)\n          } else {\n            endp$st &lt;- endp$st[1:TH,]\n            return(endp)\n          }\n        })\n      })\n    })\n  })\n})\n\n\n# !!!!!!\n# !!!!!!\n# !!!!!!\n# !!!!!!\n# !!!!!!\n# Note: i$surv$reg$pop_0$line_4$mol_999$trial_2$endpoint_4 is used\n# to inform ALL BSC OS. This will be decided in the EXCEL FILE, which \n# dropdowns for BSC OS should link to 4L PPS for mol 999\n# !!!!!!\n# !!!!!!\n# !!!!!!\n# !!!!!!\n# !!!!!!\n\n\n\n# Note that draw_plots will be a switch in the shiny application.\n# In this case we draw plots because we need those plots later (for word output\n# assisting with model selection)\n\n\n# So that's all of the TSD14 survival analysis done. The next step is to programmatically \n# proliferate comparative efficacy \n\n\n\n# On a tablet with very little computational power this takes a couple of minutes to run. on a new\n# laptop its not long at all\n\n\n# So, to pull out the visual fit of the analysis of TTD for a population\n\n# i$surv$reg$pop_0$line_1$mol_7$trial_0$endpoint_0$plot$plot\n# i$surv$reg$pop_0$line_1$mol_1$trial_0$endpoint_3$plot$plot\n# i$surv$reg$pop_0$line_1$mol_7$trial_0$endpoint_1$plot$plot\n\n# More importantly, to pull a particular extrapolation:\n# i$surv$reg$pop_0$line_1$mol_1$trial_0$endpoint_1$st[,\"weibull\"]\n\n# Where the \"weibull\" part would come from a dropdown list in the Excel front-end of the model specific\n# to that endpoint for that treatment for that line for that population (i.e. a lot of selections need to be made!)\n\n\n# The stuff inside of i$surv$reg can be used to automatically populate a report presenting the full plot, regression summaries,\n# goodness-of-fit results and the fit of the selected (via excel) distribution. The output can then be manually appended to include\n# written justification for the selection(s) to drastically reduce the overhead associated with reporting survival analysis\n# results and decisions made."
  },
  {
    "objectID": "pages/walkthrough/code0a_walkthrough.html#make-survival-analysis-report",
    "href": "pages/walkthrough/code0a_walkthrough.html#make-survival-analysis-report",
    "title": "Code walkthrough",
    "section": "Make survival analysis report",
    "text": "Make survival analysis report\n\n# 3.3.4 Survival analysis reporting ---------------------------------------\n\n# the next step is to go through all of the results based directly on survival data\n# and produce a readout containing:\n# \n# - Regression summary tables\n# - goodness of fit\n# - extrapolations (short and long-term) for visual fit assessment\n# \n# Each of these should have a separate section which at least states the identifiers\n# (i.e., translating from numbers to text as in Section 3.4.2 above)\n# \n# The best way to do this is with either Reduce or base for loops:\n# \n\n# Produce all the KM, extrapolations and gof tables for decisions on the front-end\n\n# Note whether or not the survival analysis report is run by the code is set in Excel as this takes a long time to produce\n# This cannot be produced without access to PLD\n\nif (i$dd_report_req_surv_reg==\"Yes\") {\n  \n  doc_surv &lt;- f_surv_makeTSD14Report(\n    fs_res = i$surv$reg,\n    id     = i$id$ipd,\n    lookup = i$lookup$ipd\n  )\n  print(doc_surv, target = file.path(o_path, \"Survival_Analysis.docx\"))\n  \n  rm(doc_surv)\n}\n\nSPLITMD_CODE2_END"
  },
  {
    "objectID": "pages/walkthrough/code2_extrapolate.html",
    "href": "pages/walkthrough/code2_extrapolate.html",
    "title": "Extrapolate real-world evidence",
    "section": "",
    "text": "Adjustments\n\n\n\n\n\nChanges from Model_Structure.R:\n\nAmend path to .xlsx file using d_path\n\n\n\n\n\ni$apply_waning_to\n\n[1] \"ref trt hazard\"   \"ref trt abs surv\"",
    "crumbs": [
      "Code walkthrough",
      "Extrapolate real-world evidence"
    ]
  },
  {
    "objectID": "pages/license.html",
    "href": "pages/license.html",
    "title": "License",
    "section": "",
    "text": "This repository is licensed under an MIT license:\n\n\n\n\n\n\nMIT License\nCopyright (c) 2024 University of Exeter, Exeter Oncology Model; RCC edition\nPermission is hereby granted, free of charge, to any person obtaining a copy of this model and associated documentation files (the “RCC Model”), to deal in the RCC Model without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the RCC Model, and to permit persons to whom the RCC Model is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the RCC Model.\nTHE RCC MODEL IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE RCC MODEL.",
    "crumbs": [
      "License"
    ]
  },
  {
    "objectID": "pages/changelog.html",
    "href": "pages/changelog.html",
    "title": "CHANGELOG",
    "section": "",
    "text": "All notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog, and this project adheres to Semantic Versioning. Dates formatted as YYYY-MM-DD as per ISO standard.\n\n\nEmbellished README\n\n\n\nAdd files produced by model run to .gitignore\n\n\n\n\n\nExtended README.md to include banner image with logos, extra badges, table of contents, all the information from ID6184 Using the R decision model.. (e.g. installation guide with images, overview of input files, future versions)\n\n\n\n\n\nImplemented the essential components of the STARS framework (exc. open science archive).\n\n\n\nCITATION.cff and GitHub action to check validity (cff_validation.yaml)\n\n\n\n\n\nExtended README.md to include some instructions for installing and running the model, more detailed repositoriy overview, citation information, ORCID IDs, acknowledgements, license and funding information\n\n\n\n\n\nFormatting of copyright statement in LICENSE\n\n\n\n\n\n🌱 First release. EOM-RCC model as shared by the PenTAG team, with minor changes that enabled us to run the model.\n\n\n\nCode from the original repository - https://github.com/nice-digital/NICE-model-repo\nR environment for dependency management (renv)\n\n\n\n\n\nSet model to run sequentially (in 2_Scripts/Model_Structure.R)",
    "crumbs": [
      "Changelog"
    ]
  },
  {
    "objectID": "pages/changelog.html#v1.1.1---2024-08-20",
    "href": "pages/changelog.html#v1.1.1---2024-08-20",
    "title": "CHANGELOG",
    "section": "",
    "text": "Embellished README\n\n\n\nAdd files produced by model run to .gitignore\n\n\n\n\n\nExtended README.md to include banner image with logos, extra badges, table of contents, all the information from ID6184 Using the R decision model.. (e.g. installation guide with images, overview of input files, future versions)",
    "crumbs": [
      "Changelog"
    ]
  },
  {
    "objectID": "pages/changelog.html#v1.1.0---2024-08-16",
    "href": "pages/changelog.html#v1.1.0---2024-08-16",
    "title": "CHANGELOG",
    "section": "",
    "text": "Implemented the essential components of the STARS framework (exc. open science archive).\n\n\n\nCITATION.cff and GitHub action to check validity (cff_validation.yaml)\n\n\n\n\n\nExtended README.md to include some instructions for installing and running the model, more detailed repositoriy overview, citation information, ORCID IDs, acknowledgements, license and funding information\n\n\n\n\n\nFormatting of copyright statement in LICENSE",
    "crumbs": [
      "Changelog"
    ]
  },
  {
    "objectID": "pages/changelog.html#v1.0.0---2024-08-16",
    "href": "pages/changelog.html#v1.0.0---2024-08-16",
    "title": "CHANGELOG",
    "section": "",
    "text": "🌱 First release. EOM-RCC model as shared by the PenTAG team, with minor changes that enabled us to run the model.\n\n\n\nCode from the original repository - https://github.com/nice-digital/NICE-model-repo\nR environment for dependency management (renv)\n\n\n\n\n\nSet model to run sequentially (in 2_Scripts/Model_Structure.R)",
    "crumbs": [
      "Changelog"
    ]
  },
  {
    "objectID": "pages/publication.html",
    "href": "pages/publication.html",
    "title": "List of articles and reports",
    "section": "",
    "text": "As referred to in the description of the NICE appraisals, there are several articles and reports that have been published in relation to this model. Several of these are listed below.",
    "crumbs": [
      "Context",
      "List of articles and reports"
    ]
  },
  {
    "objectID": "pages/publication.html#web-pages",
    "href": "pages/publication.html#web-pages",
    "title": "List of articles and reports",
    "section": "Web pages",
    "text": "Web pages\nThe pathways pilot is mentioned as part of NICE’s webpage on taking a proportion approach to technology appraisals. [1] There are also then webpages available for each of the appraisals: the pathways pilot [2] and the appraisal of cabozatinib with nivolumab [3]",
    "crumbs": [
      "Context",
      "List of articles and reports"
    ]
  },
  {
    "objectID": "pages/publication.html#reports",
    "href": "pages/publication.html#reports",
    "title": "List of articles and reports",
    "section": "Reports",
    "text": "Reports\nThe above web pages link to relevant NICE reports, and these include….\n\nFinal analysis plan for the model available as a PDF [4]\nRenal cell carcinoma pathway model report, which is “a summary of the external assessment group’s model and assumptions on renal cell carcinoma, discussed by NICE’s technology appraisal committee B”. Available as a PDF or within their website [5]\nNICE’s technology appraisal guidance on cabozatinib with nivolumab for untreated advanced renal cell carcinoma. Avaliable as a PDF or within their website [3]\n\nAnd others from the appraisal history like:\n\nAssessment report plain english summary - PDF\nAssessment report final analysis plan - this appears the same as that from the alternative link above - PDF\nAssessment report - PDF",
    "crumbs": [
      "Context",
      "List of articles and reports"
    ]
  },
  {
    "objectID": "pages/publication.html#publications",
    "href": "pages/publication.html#publications",
    "title": "List of articles and reports",
    "section": "Publications",
    "text": "Publications\nThere has been one related publication: the article NICE’s Pathways Pilot: Pursuing Good Decision Making in Difficult Circumstances [6], with a later correction published. [7] These are licensed under a CC-BY-NC-4.0 license, which enables us to share them below.\nArticle [6]:\n\n\nCorrection [7]:",
    "crumbs": [
      "Context",
      "List of articles and reports"
    ]
  },
  {
    "objectID": "pages/model_overview.html",
    "href": "pages/model_overview.html",
    "title": "Detailed summary",
    "section": "",
    "text": "This repository contains code to support appraisal of the cost-effectiveness of treatments in advanced renal cell carcinoma. It is currently applied to an appraisal of cabozantinib and nivolumab. This application and an overview of the analysis and modelling steps performed are described below.",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/model_overview.html#background",
    "href": "pages/model_overview.html#background",
    "title": "Detailed summary",
    "section": "Background",
    "text": "Background\n\nRenal cell carnioma stages and risk groups\nRenal cell carcinoma (RCC) is a type of kidney cancer. It is the most common type, accounting for over 80% of cases. The treatment strategy depends on RCC’s location and stage. The stages of RCC can be defined as:\n\n\n\n\n\n\n\n\nStage 1 and 2\nStage 3\nStage 4\n\n\n\n\nCancer is only in the kidney\nCancer may have spread to nearby lymph nodes\nCancer has metastasised, meaning it has spread to other areas of the body; Also known as advanced RCC (aRCC)\n\n\n\nPeople with aRCC who have not yet received systemic treatments (therapies that target cancer cells throughout the body) are classified as either being favourable-risk RCC or intermediate- and poor-risk RCC. These categories are defined in the International Metastatic Renal Cell Carcinoma Database Consortium (IMDC) criteria. They are established based on time from diagnosis, the patient’s ability to perform daily tasks, and some laboratory measurements. In the UK, most RCC patients are classified as intermediate or poor risk. Risk status is associated with clinical outcomes (for example, mortality rates). It is used to help guide decisions on which treatments to use.\nFor more information, see section 2.2 “Epidemiology” and 2.3.1 “Risk Status” in the Assessment Report. [1]\n\n\nFocus of the appraisal\nThe analysis in this repository is related to the NICE appraisal TA964 [2] which assesses the clinical- and cost-effectiveness of cabozantinib with nivolumab as a first-line therapy for patients with aRCC.\nThis treatment is a combination of:\n\nCabozantinib - oral, 40mg daily\nNivolumab - intravenous, 240mg every 2 weeks or 480mg every 4 weeks\n\nIt is a first-line (1L) systemic therapy, meaning it is for previously untreated patients. They may then have up to 3 more treatments (referred to as second-line (2L), third-line (3L) and fourth-line (4L) therapies), or at any point, may instead transition to receiving best-supportive care (BSC).\nThe appraisal compares this treatment against other 1L treatments. When modelling this, it includes a simulation of the subsequent treatments that people might receive after each.\nFor more information, see section 3.2 “Interventions” and 3.3 “The RCC treatment pathway” in the Assessment Report. [1]",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/model_overview.html#summary-diagram",
    "href": "pages/model_overview.html#summary-diagram",
    "title": "Detailed summary",
    "section": "Summary diagram",
    "text": "Summary diagram\n\n\n\nOverview of analysis performed for this appraisal.",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/model_overview.html#stage-1.-estimating-the-relative-efficacy-of-each-treatment",
    "href": "pages/model_overview.html#stage-1.-estimating-the-relative-efficacy-of-each-treatment",
    "title": "Detailed summary",
    "section": "Stage 1. Estimating the relative efficacy of each treatment",
    "text": "Stage 1. Estimating the relative efficacy of each treatment\n\n\n\nExcerpt from overview diagram for Stage 1\n\n\n\nIdentification of randomised controlled trials\nA systematic review was conducted to identified randomised controlled trials (RCTs) of patients with aRCC who received any of the treatments under comparison - namely: cabozantinib plus nivolumab; pazopanib; tivozanib; sunitinib; cabozantinib; nivolumab plus ipilimumab; pembrolizumab and lenvatinib; axitinib; lenvatinib plus everolimus; everolimus; nivolumab; avelumab plus axitinib\nThe studies had to report at least one of the outcomes of interest:\n\nOverall survival (OS) - “time from randomisation to death” [3]\nProgression-free survival (PFS) - “time from randomisation until first evidence of disease progression or death” [3]\nTime to next treatment (TTNT) - “time from initiating treatment to initiating the next line of therapy” [3]\nTime on treatment - similar to TTNT, but excluding time off treatment between lines of therapy\nResponse rates (also known as objective response rate) - the proportion of people with partial response (decrease in tumour size) or complete response (disappearance of all signs of cancer) [4]\nDuration of response - “time from randomisation to disease progression or death in patients who achieve complete or partial response” [3]\nAdverse events (AEs) of treatment - “undesired effect” of treatment [4]\nHealth-related quality of life (HRQoL) - “the impact a medical condition and/or treatment has on a patient’s functioning and well-being” [5]\n\nThe review identified 24 RCTs to include (plus an additional 6, but these were ongoing). All 24 studies recorded OS, PFS, response rate and adverse events, whilst other outcomes were more sparsely recorded.\nFor more information, see section “3.1.1 Identification of systematic literature reviews and randomised controlled trials” and “Table 11 Outcomes reported by RCTs included in the review” in the Assessment Report [1] and section 1.8 “Literature review approach” in the Pathway Model Report. [6]\n\n\nNetwork meta-analysis\nThe identified trials do not all include the same treatments, with each comparing different therapies head-to-head. To illustrate this, below are 1L network diagrams for PFS and OS, as based on Figures 16 and 17 in the Assessment Report. [1] These show which treatments were directly compared head-to-head: each circle represents a treatment, and each line represents a clinical trial.\n\n\n\n1L network diagrams for PFS and OS, as adapted from the Assessment Report. Abbreviations: ave, avelumab; axi, axitinib; cabo, cabozantinib; ipi, ipilimumab; lenv, lenvatinib; nivo, nivolumab; pazo, pazopanib; pem, pembrolizumab; sora, sorafenib; suni, sunitinib; tivo, tivozanib.\n\n\nFor our economic model, we need to understand the clinical effectiveness of each treatment for each outcome, relative to the other treatments. This is measured using hazard ratios (HR), which are “a measure of how often a particular event happens in one group compared to how often it happens in another group, over time”. [4]\nIn order to estimate the comparative effectiveness of interventions that may not have been compared head-to-head in a randomised trial, network meta-analyses (NMA) were performed. Two types of NMA were used:\n\nProportional hazards NMA (PH NMA) which returns a single hazard ratio for each comparison, as it “assumes the relative effects of each treatment… remain constant over time”\nFractional polynomial NMA (FP NMA) which returns a list of time-varying hazard ratios for each comparison, as it “allows the relative effects to change over time” [6]\n\nFor each RCT, requests were made to the company that owned each trial’s data, asking for grouped survival data (in time intervals of 1 or 4 weeks), for used in the NMAs. If this was not received, then the published curves were digitised to estimate the grouped survival data.\nNMA were performed for:\n\nOS and PFS in the all-risk group, favourable-risk and intermediate- and poor-risk subgroups\nSafety for the all-risk group\n\nPH NMA and FP NMA were both conducted, but the chosen models used were:\n\nFP NMA for 1L efficacy - as the “flexible time-varying hazard ratios… provided a better, more plausible fit to observed short-term data” [6] and as the proportional hazards was violated for some 1L treatments. However, PH NMA was used for pembrolizumab plus lenvatinib, as FP NMA produced implausible results.\nPH NMA was used for 2L and 3L efficacy due to the “sparsity of the available network and extreme results within the fitted models” [1]\n4L efficacy was based on 3L outcomes, applying the hazard ratio for the difference between pooled 3L and 4L outcomes\n\nFor more information, see section 1.16 “Relative effectiveness” in the Pathway Model Report [6] and 4.3.5.2 “Calculation of relative treatment effectiveness” in the Assessment Report. [1]",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/model_overview.html#stage-2.-extrapolating-survival-curves-from-real-world-evidence",
    "href": "pages/model_overview.html#stage-2.-extrapolating-survival-curves-from-real-world-evidence",
    "title": "Detailed summary",
    "section": "Stage 2. Extrapolating survival curves from real-world evidence",
    "text": "Stage 2. Extrapolating survival curves from real-world evidence\n\n\n\nExcerpt from overview diagram for Stage 2\n\n\n\nIdentification of RWE\nA targeted search was conducted to identify RWE (i.e. observational studies describing outcomes in practice, outside of a trial setting). The search was for studies that included patients with aRCC and described at least one of:\n\nTreatment pathways\nNatural history of disease\nPatient characteristics\n\nOf the 12 real-world datasets identified, only one was considered to be robust and relevant to the UK. This was Challapalli et al. 2022. [7] The owners of this dataset provided access to patient-level data.\nFor more information, see section 1.12 “Real-world evidence” in the Pathway Model Report [6] and 3.1.2 “Identification of real-world evidence” in the Assessment Report. [1]\n\n\nExtrapolation of RWE\nThe OS, PFS, time to discontinuation (TTD), time to progression (TTP) and post-progression survival (PPS) survival curves from Challapalli et al. 2022 [7] were extrapolated so that they covered the time horizon of the economic model, which was 40 years. Extrapolation was conducted using survival analysis (with a partitioned survival model).\nFor more information, see section 4.3.5.1 “Extrapolation of survival curves” in the Assessment Report [1] and section 1.13 “Baseline risk” in the Pathway Model Report. [6]",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/model_overview.html#stage-3.-applying-nma-hazard-ratios-to-rwe-reference-curves",
    "href": "pages/model_overview.html#stage-3.-applying-nma-hazard-ratios-to-rwe-reference-curves",
    "title": "Detailed summary",
    "section": "Stage 3. Applying NMA hazard ratios to RWE reference curves",
    "text": "Stage 3. Applying NMA hazard ratios to RWE reference curves\n\n\n\nExcerpt from overview diagram for Stage 3 and 4\n\n\n\nReference curves\nFor 1L, the reference treatment used was sunitinib as it:\n\nIt is used in UK practice for all risk groups\nIt was the most common 1L treatment in the RWE\nWas the comparator for the most of the RCTs (see the network diagram above)\n\nFor 2L and 3L, the reference treatment used was cabozantinib as:\n\nIt was the most common 2L and 3L treatment in the RWE\n“Data were mature compared to other treatments” [1]\n\nThe reference treatment was based on RWE as per recommendations from the NICE manual and other recent appraisals.\nFor more information, see section 4.3.5 “Treatment effectiveness and extrapolation” in the Assessment Report [1] and sections 1.13 “Baseline risk” and 1.14 “Appropriateness” in the Pathway Model Report. [6]\n\n\nApplying the hazard ratios to the reference curves\nThe effectiveness of 1L sunitinib and 2L cabozantinib is provided by the RWE reference curves. For all other treatments, the effectiveness is calculated by applying the NMA HRs to the reference curves.\nThe source of the HRs for each treatment, line and outcome were as follows:\n\nPFS and OS from the NMA - FP NMA for 1L (with exception of pembrolizumab plus lenvatinib) and PH NMA for 2L and 3L\nAssume 1L pazopanib and tivozanib effectiveness are the same as sunitinib (as not available in NMA)\nAssume 2L/3L sunitinib and pazopanib effectiveness are the same as tizovanib (as not available in NMA)\nAssume 1L TTD and TTP are the same as PFS\nAssume 2L/3L TTP is the same as PFS, but for TTD apply a hazard ratio to the PFS, as calculated from the 1L treatments\nCalculate 4L outcomes by applying hazard ratio on 3L outcomes\n\nIn the code, the nested list containing the HRs and survival times for each treatment is referred to as a relative efficacy network, and when the hazard ratios are applied to the reference curve, this was described as propagating the network.\nFor more information, see section 4.3.5.2 “Calculation of relative treatment effectiveness” in the Assessment Report [1] and section 1.16 “Relative effectiveness” in the Pathway Model Report. [6]",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/model_overview.html#stage-4.-modifications-to-the-extrapolations",
    "href": "pages/model_overview.html#stage-4.-modifications-to-the-extrapolations",
    "title": "Detailed summary",
    "section": "Stage 4. Modifications to the extrapolations",
    "text": "Stage 4. Modifications to the extrapolations\n\nTreatment effect waning\nTreatment effect waning is when the hazard/survival for a treatment converges to the hazard/survival of the comparator. This was implemented at 5 years for 1L combination therapies that included an immuno-oncology (IO) treatment and tyrosine kinase inhibitor (TKI) (for example, axitinib and avelumab). It was set at 5 years as that is when people stop having that therapy in clinical practice.\nFor more information, see section 1.22 “Treatment effect waning” in the Pathway Model Report [6] and 4.3.5.3 “Treatment effectiveness waning” in the Assessment Report. [1]\n\n\nGeneral population mortality\nIf aRCC patients were projected to live longer than the general population, this was corrected (hence, ensuring the aRCC OS never exceeds the general population). General population mortality was based on an age and sex matched-profile (against the 1L all risk population) using data from the Office for National Statistics (ONS).\nFor more information, see section 4.3.5.4 “Accounting for general population mortality” in the Assessment Report. [1]\n\n\nOverlapping curves\nA known limitation of partitioned survival analysis (which was used to extrapolate the RWE) is that it can produce curves where PFS lies above OS (which is impossible in real-life). Hence, in cases where this occurs, it was adjusted so that PFS &lt;= OS (and also, PFS &lt;= TTP).\nFor more information, see section 4.3.5.5 “Adjustment for curves crossing” in the Assessment Report. [1]",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/model_overview.html#stage-5.-preparation-of-other-data-for-the-economic-models",
    "href": "pages/model_overview.html#stage-5.-preparation-of-other-data-for-the-economic-models",
    "title": "Detailed summary",
    "section": "Stage 5. Preparation of other data for the economic models",
    "text": "Stage 5. Preparation of other data for the economic models\n\n\n\nExcerpt from overview diagram for Stage 5, 6 and 7\n\n\n\nAdverse events\nAs for the effectiveness outcomes from the NMA, the hazard ratios for grade 3+ adverse events calculated in the NMA were applied to reference curves. For all grade adverse events, hazard ratios from an NMA in a cochrane review were used. The reference curves (i.e. the baseline adverse event risk in the model) were:\n\n1L - sunitib from Checkmate 9ER RCT\n2L and 3L - everolimus from CheckMate 025 RCT\n\nThis is with the exception of cabozantinib plus nivolumab, whose rates were based directly on Checkmate 9ER RCT data.\nFor more information, see section 1.24 “Adverse events” in the Pathway Model Report [6] and 4.3.6 “Adverse events” in the Assessment Report. [1]\n\n\nUtility values\nFor each line of treatment, there was a:\n\nUtility value for patients who were progression free\nUtility value for patients with progressed disease\nUtility value for BSC\n\nThe values were sourced from prior NICE technology appraisals - TA645 for 1L and then adjustment to that based on TA498 for 2L to 4L. These were identified through a systematic search for published cost-effectiveness studies.\nUtility values were adjusted for age and sex using Ara and Brazier et al. 2010 [8] / 2011 [9] and the Health Survey England (HSE) 2014 dataset.\n\n\n\n\n\n\nNote about values in probablistic model\n\n\n\n\n\n\nIt was not possible to adjust utilities values in the probablistic models, as the interactions between age and sex would need to be accounted for, but Ara and Brazier et al. 2011 [9] do not report the variance-covariance matrix that would have described how the variations correlate with each other. Varying age and sex separately could lead to spurious results or inference due to non-linear interactions between the parameters (some of which are transformed).\n\n\n\nFor more information, see sections 1.25 “Health-related quality of life” and 1.26 “Source of utility values” in the Pathway Model Report [6] and sections 4.1 “Published cost-effectiveness studies” and 4.3.7 “Utility values” in the Assessment Report. [1]\n\n\nResource use and costs\nSimilar to the utility values, resource use was based on prior NICE technology appraisals, whilst costs were based on NHS reference costs and costs from the Personal Social Services Research Unit. These include estimates of resource use and costs for:\n\nDisease management/health state (i.e. consultant and specialist nurse visits, CT scans, blood tests, pain medication)\nEnd of life (i.e. GP appointments, district nursing care, social care, hospital care)\nDrug and administration (i.e. costs of each drug)\nAdverse events (e.g. Grade 1/2 events like diarrehoea or fatigue, and Grade 3+ events like anaemia, hypertension and nausea)\nSubsequent treatment (i.e. radiotherapy, surgery)\n\nFor more information, see section 4.3.8 “Resource use and costs” in the Assessment Report [1] and sections 1.27 “Resource use” and 1.28 “Relative dose intensity” in the Pathway Model Report. [6]\n\n\nTreatment sequences\nA list of possible treatment sequences was defined based on rules which were established based on clinical advice and routine commissioning rules. These rules are listed in section 4.3.5.6 “Calculation of final outcomes by first line treatment” in the Assessment Report. [1] Some examples include:\n\nNivolumab plus ipilimumab 1L is only available to intermediate/poor risk patients\nSome therapies can’t be used if an immuno-oncology treatment was used in the past year\nLenvatinib plus everolimus can only be used after a prior anti-vascular endothelial growth factor (anti-VEGF) treatment\n\n\n\nProportion of people receiving each treatment in practice\nThe proportion of people receiving each treatment in the model is based on the observed practices in the RWE.\nFor more information, see section 4.3.1.8 “EAG model structure” in the Assessment Report [1] and section 1.23 “Sequencing subsequent treatments” in the Pathway Model Report. [6]",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/model_overview.html#stage-6.-economic-models",
    "href": "pages/model_overview.html#stage-6.-economic-models",
    "title": "Detailed summary",
    "section": "Stage 6. Economic models",
    "text": "Stage 6. Economic models\n\nModel diagram\nThe economic model is designed to model up to four lines of treatment before best supportive care. A diagram of the model is provided below. There are ten possible health states:\n\nFirst line (1L) off or on treatment\nSecond line (2L) off or on treatment\nThird line (3L) off or on treatment\nFourth line (4L) off or on treatment\nBest supportive case (BSC)\nDeath\n\nTransition between lines of treatment can be defined by either progression-free survival (PFS) or time to next treatment (TTNT).\n\n\n\n\nStructure of the model and transition between health states\n\n\nFor more information, see section 4.3.1.8 “EAG model structure” in the Assessment Report [1] and 1.6 “Economic model structure” in the Pathway Model Report. [6]\n\n\nMethodology\nTwo modelling approaches were explored, with the creation of:\n\nA state transition model (i.e. a Markov model)\nA partitioned survival model (i.e. partitioned surival analysis)\n\nThe models aimed to estimate the costs and benefits of cabolizumab plus nivolumab, compared against other 1L treatments, whilst also incorporating information on the subsequent treatment pathways. People in the models started on 1L treatment. The models ran with weekly cycles over a 40 year time horizon. Costs and outcomes were discounted at a rate of 3.5% per year.\nThe committee preferred the state transition model as it allowed multiple treatment lines to be modelled in as much detail as possible (with a state transition model being more flexible and able to explore more uncertainties and alternative assumptions).\nFor more information, see section 1.6 “Economic model structure” in the Pathway Model Report [6] and 4.3 “EAG economic analysis” in the Assessment Report. [1]",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/model_overview.html#stage-7.-processing-model-results",
    "href": "pages/model_overview.html#stage-7.-processing-model-results",
    "title": "Detailed summary",
    "section": "Stage 7. Processing model results",
    "text": "Stage 7. Processing model results\nThe models simulate how a cohort of patients would transition between health states over the time horizon, depending on which treatments they received. It returns the proportion of patients over time in each health state. We then apply:\n\nCosts\nUtilities, with quality-adjusted life years (QALYs) calculated from multiplying the years in a health state by the utility score\n\nAn incremental cost-effectiveness ratio (ICER) can be calculated from the difference in costs divided by the difference in QALYs, and these can be compared between treatments.\n\nSeverity modifier\nA greater weight can be given to QALYs if the treatment is for a condition with a high degree of severity, and this is referred to as a severity modifier. It was implemented for the state transition model, meaning that the results included absolute and proportional shortfall estimates of QALYs. Three methods were explored for calculating the severity modifier.\nFor more information, see section 1.29 “Severity” in the Pathway Model Report [6] and 4.3.9 “Severity” in the Assessment Report. [1]",
    "crumbs": [
      "Model overview",
      "Detailed summary"
    ]
  },
  {
    "objectID": "pages/citation.html",
    "href": "pages/citation.html",
    "title": "Citation",
    "section": "",
    "text": "If you re-use this model please appropriately credit PenTAG for the work and refer to it as the Exeter Oncology Model: RCC edition. You can use the following citation:\n\nLee D., Muthukumar M., Lovell A., Farmer C., Burns D., Matthews J., Coelho H., O’Toole B., Trigg L., Snowsill T., Barnish M., Nikoglou T., Brand A., Ahmad Z., Abdelsabour A., Robinson S., Wilson E., Melendez-Torres G. Exeter Oncology Model: RCC edition URL: https://github.com/nice-digital/NICE-model-repo",
    "crumbs": [
      "Citation"
    ]
  },
  {
    "objectID": "pages/citation.html#how-to-cite-this-model",
    "href": "pages/citation.html#how-to-cite-this-model",
    "title": "Citation",
    "section": "",
    "text": "If you re-use this model please appropriately credit PenTAG for the work and refer to it as the Exeter Oncology Model: RCC edition. You can use the following citation:\n\nLee D., Muthukumar M., Lovell A., Farmer C., Burns D., Matthews J., Coelho H., O’Toole B., Trigg L., Snowsill T., Barnish M., Nikoglou T., Brand A., Ahmad Z., Abdelsabour A., Robinson S., Wilson E., Melendez-Torres G. Exeter Oncology Model: RCC edition URL: https://github.com/nice-digital/NICE-model-repo",
    "crumbs": [
      "Citation"
    ]
  },
  {
    "objectID": "pages/citation.html#acknowledgements",
    "href": "pages/citation.html#acknowledgements",
    "title": "Citation",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis modified repository was developed by Amy Heather . Changes from the original repository can be viewed in the changelog.\nThese modifications were made to improve the clarity and open science credentials of the EOM:RCC model, as part of the project STARS.",
    "crumbs": [
      "Citation"
    ]
  },
  {
    "objectID": "pages/acronyms.html",
    "href": "pages/acronyms.html",
    "title": "Acryonyms",
    "section": "",
    "text": "Acronym\nMeaning\n\n\n\n\n1L\nFirst line\n\n\n2L\nSecond line\n\n\n3L\nThird line\n\n\n4L\nFourth line\n\n\nAbs\nAbsolute\n\n\nACIC\nAcademic and commercial in confidence\n\n\nADaM\nAnalysis Data Model\n\n\nAE\nAdverse event\n\n\nASCO\nAmerican Society Of Clinical Oncology\n\n\naRCC\nAdvanced renal cell carcinoma\n\n\nAUC\nArea under the curve\n\n\nBSC\nBest supportive care\n\n\ncabo\ncabozantinib\n\n\nCIC\nCommercial in confidence\n\n\nCDF\nCancer Drugs Fund\n\n\nCE\nCost effectiveness\n\n\nCEA\nCost effectiveness analysis\n\n\nCODA\nConvergence diagnosis and output analysis\n\n\ncPAS\nConfident patient access scheme\n\n\nDSU\nDecision support unit\n\n\nEAG\nExternal assessment group\n\n\nEOL\nEnd of life\n\n\nEOM-RCC\nExeter Oncology Model: Renal Cell Carcinoma edition\n\n\nERG\nEvidence Review Group\n\n\nevero\nEverolimus\n\n\nFAD\nFinal appraisal document\n\n\nfav\nFavourable\n\n\nFP\nFractional polynomial\n\n\nFP NMA\nFractional polynomial network meta-analysis\n\n\nGen\ngeneral\n\n\nHFS\nHand-foot syndrome\n\n\nHPC\nHigh-performance computing\n\n\nHR\nHazard ratio\n\n\nHRQL\nHealth-related quality of life\n\n\nHTA\nHealth technology assessment\n\n\nICER\nIncremental Cost-Effectiveness Ratio\n\n\nint\nIntermediate\n\n\nIMDC\nInternational Metastatic Renal Cell Carcinoma Database Consortium\n\n\nIO\nImmuno-oncology\n\n\nIPD\nIndividual patient data\n\n\nipi\nIpilimumab\n\n\nIV\nIntravenous\n\n\nKM\nKaplan-Meier\n\n\nlenv\nLenvatinib\n\n\nLY\nLife year(s)\n\n\nLYG\nLife year(s) gained\n\n\nMRC\nMedical Research Council\n\n\nMRU\nMedical Resource Use\n\n\nMTA\nMultiple technology appraisal\n\n\nNHS\nNational Health Service\n\n\nNHSE\nNational Health ServiceEngland\n\n\nNICE\nNational Institute for Health and Care Excellence\n\n\nNIHR\nNational Institute for Health and Care Research\n\n\nnivo\nNivolumab\n\n\nNMA\nNetwork meta-analysis\n\n\nONS\nOffice for National Statistics\n\n\nOS\nOverall survival\n\n\nPartSA\nPartitioned-survival analysis\n\n\nPAS\nPatient access scheme\n\n\nPATT\nProportionate approach to technology appraisals\n\n\npazo\npazopanib\n\n\nPD\nProgressed disease\n\n\npem\nPembrolizumab\n\n\nPenTAG\nPeninsula Technology Assessment Group\n\n\nPFS\nProgression-free survival\n\n\nPH\nProportional hazards\n\n\nPH NMA\nProportional hazards network meta-analysis\n\n\nPLD\nPatient-level data\n\n\nPLMT\nPopulation + Line + Molecule + Trial\n\n\nPLMTE\nPopulation + Line + Molecule + Trial + Endpoint\n\n\npop\nPopulation\n\n\nPPS\nPost-progression survival\n\n\nprop\nProportional\n\n\nPSA\nProbablistic sensitivity analysis\n\n\nPSM\nProgressed state membership\n\n\nQALY\nQuality-adjusted life year(s)\n\n\nQC\nQuality check\n\n\nRCC\nRenal cell carcinoma\n\n\nRDI\nRelative dosing intensity\n\n\nRE\nRelative efficacy\n\n\nROC\nRenal Oncology Collaborative\n\n\nRWE\nReal-world evidence\n\n\nSF\nShortfall\n\n\nSOC\nStandard of care\n\n\nst\nSurvival at time t\n\n\nSTA\nSingle technology appraisal\n\n\nsuni\nSunitinib\n\n\nTA\nTechnology appraisal\n\n\ntivo\nTivozanib\n\n\nTKI\nTyrosine Kinase Inhibitor\n\n\nTP matrices\nTreatment pathway matrices\n\n\nTSD\nTechnical Support Document\n\n\nTTD\nTime to discontinuation\n\n\nTOT\nTime on treatment\n\n\nTTNT\nTime to next treatment\n\n\nTTP\nTime to progression\n\n\nTuotA\nTime unit of the analysis\n\n\nUK\nUnited Kingdom\n\n\nVEGF\nVascular endothelial growth factor\n\n\nvs\nVersus\n\n\nWTP\nWillingness to pay",
    "crumbs": [
      "Acryonyms"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exeter Oncology Model: Renal Cell Carcinoma edition",
    "section": "",
    "text": "The Exeter Oncology Model: Renal Cell Carcinoma edition (EOM-RCC) is a platform cost-effectiveness model encompassing each decision node in the disease area for advanced renal cell carcinoma.\nIt has been constructed as part of the National Institute for Health and Care Excellence (NICE) Pathways Pilot appraisal (ID6186, GID-TA11186) [1] and the appraisal of cabozantinib plus nivolumab (TA964) [2] (formerly ID6184, whilst in development). The development of this model is described in Lee et al. 2024. [3]\nThis website was created by Amy Heather . It shares model documentation to support understanding of how the model works, and how you can use it. Please use the sidebar to navigate through the site pages.\n\n\n\n\nReferences\n\n[1] National Institute for Health and Care Excellence (NICE). Renal cell carcinoma Pathways Pilot [ID6186]. In development [GID-TA11186] n.d.\n\n\n[2] National Institute for Health and Care Excellence (NICE). Cabozantinib with nivolumab for untreated advanced renal cell carcinoma. Technology appraisal guidance [TA964] 2024.\n\n\n[3] Lee D, Burns D, Wilson E. NICE’s Pathways Pilot: Pursuing Good Decision Making in Difficult Circumstances. PharmacoEconomics - Open 2024. https://doi.org/10.1007/s41669-024-00490-x.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/appraisals.html",
    "href": "pages/appraisals.html",
    "title": "NICE appraisals",
    "section": "",
    "text": "This model was developed by the Peninsula Technology Assessment Group (PenTAG) at the University of Exeter. This was in collaboration with the National Institute for Health and Care Excellence (NICE) as part of two appraisals, described below.",
    "crumbs": [
      "Context",
      "NICE appraisals"
    ]
  },
  {
    "objectID": "pages/appraisals.html#renal-cell-carcinoma-pathways-pilot-id6186-gid-ta11186",
    "href": "pages/appraisals.html#renal-cell-carcinoma-pathways-pilot-id6186-gid-ta11186",
    "title": "NICE appraisals",
    "section": "Renal cell carcinoma Pathways Pilot (ID6186, GID-TA11186)",
    "text": "Renal cell carcinoma Pathways Pilot (ID6186, GID-TA11186)\nIn 2022, NICE announced a programme aimed at taking a “proportionate approach to technology appraisals” (PATT). In the first phase of the programme, they “simplified, removed, or reconfigured parts of the appraisals process”. This was to enable the production of rapid guidance for simpler low-risk decisions by allowing “light-touch, faster evaluations” for those topics. In the second phase of the programme, they have been exploring several other ways of working, one of which being to take a “pathways approach to technology appraisals.” [1]\nThe pathways approach involves the production of a reusable platform/reference model for each disease area. The rationale for this that many NICE appraisals are in only a few disease areas, with almost half of health technology assessments within ten disease areas. Hence, developing a single reference model for each disease area should help “reduce repetition and improve consistency in decision making”. [2]\nIn their analysis plan, Lee et al. 2023 [3] emphasise the importance of these models being open-source so they can be reused and maintained without restriction. They give the example of the Innovation and Value Initiative (IVI) Open-Source Value project which started in 2018 and has since produced three disease models which are freely shared on their GitHub. [3] Each of these models are developed in R, with the first two being R packages with hosted documentation and supporting web applications (created with a commercial organisation, https://clarityviz.com/):\n\nNon-small cell lung cancer - GitHub, documentation, basic web app, advanced web app (note: these web apps are not working currently)\nRheumatoid arthritis - GitHub, documentation, model interface (advanced app), value tool (basic app)\nMajor depressive disorder - GitHub\n\nThe NICE pilot of the pathways approach was in renal cell carcinoma (ID6186, GID-TA11186). [4] This pilot was the Exeter Oncology Model: Renal Cell Carcinoma edition (EOM:RCC), as described and presented in this repository. In 2024, Lee et al. published an article describing their experience of developing this model (see publication page). [2] A final report from NICE on the pilot will be released in 2024/25. [1]",
    "crumbs": [
      "Context",
      "NICE appraisals"
    ]
  },
  {
    "objectID": "pages/appraisals.html#cabozantinib-with-nivolumab-for-untreated-advanced-renal-cell-carcinoma-ta964-formerly-id6184",
    "href": "pages/appraisals.html#cabozantinib-with-nivolumab-for-untreated-advanced-renal-cell-carcinoma-ta964-formerly-id6184",
    "title": "NICE appraisals",
    "section": "Cabozantinib with nivolumab for untreated advanced renal cell carcinoma (TA964, formerly ID6184)",
    "text": "Cabozantinib with nivolumab for untreated advanced renal cell carcinoma (TA964, formerly ID6184)\nThe technology appraisal guidance for cabozantinib with nivolumab for untreated advanced renal cell carcinoma was published on 10 April 2024. When developing this guidance, the evaluation comittee considered:\n\nEvidence submitted by Ipsen\nA revise of Ipsen’s submission by the external assessment group (EAG)\nThe EAG’s economic model (EOM:RCC)\nResponses from stakeholders\n\nThe main source of evidence for clinical effectiveness was the results of “CheckMate 9ER, a single-blind randomised controlled trial comparing cabozantinib plus nivolumab with sunitinib”. The economic model was the EOM:RCC, and the preferred assumptions for this model from the committee and from the company are outlined in the appraisal guidance. [5] The model itself is then further described in a pathway model report. [6]",
    "crumbs": [
      "Context",
      "NICE appraisals"
    ]
  },
  {
    "objectID": "pages/installation.html",
    "href": "pages/installation.html",
    "title": "Installation",
    "section": "",
    "text": "To install and run this model, you will need to have the following on your machine:",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "pages/installation.html#installing-the-model",
    "href": "pages/installation.html#installing-the-model",
    "title": "Installation",
    "section": "Installing the model",
    "text": "Installing the model\nThere are a few options for installing this model.\n\nAccessing the code via Git (version control)\nTo access the model using Git the easiest method is to create a new project in RStudio which links to the NICE github website. Simply click New Project in the right hand of your RStudio screen:\n\nThen select Version Control:\n\nThen choose Git:\n\nPaste in the URL of the NICE repository (https://github.com/nice-digital/NICE-model-repo) in the repository URL and decide where you want the project to be saved on your computer using the Browse functionality. All of your team can access the code then in the same way.\nIf there is more than one branch of code available as the model is updated you can select what branch of the code to look at on the top right of your screen.\n\n\n\nAccessing the code by downloading the model\nIf you do not wish to access the model via Git you can instead download the code and run the model on your local machine either using RStudio or R.\nTo do this click the Code button and then Download ZIP:\n\nExtract the zip file to wherever on your machine you want to store the model. We would suggest saving it somewhere other than the Downloads/ folder. Open RStudio and press File then New Project:\n\nClick Existing Directory:\n\nClick on the folder where you have saved the model. Make sure you click fully through until you can see the sub folders. Then press Open and then Create Project.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "pages/installation.html#installing-the-model-dependencies",
    "href": "pages/installation.html#installing-the-model-dependencies",
    "title": "Installation",
    "section": "Installing the model dependencies",
    "text": "Installing the model dependencies\nYou’ll also need to install the model dependencies. Your options for this include:\n\nInstalling into current environment\nIn Model_Structure.R, lines 6 to 28 contain instructions for installing the relevant packages. You can use ctrl+shift+c to uncomment these lines and ctrl+enter to run a line or a group of highlighted lines. You only need to do this once and then should recomment the lines using ctrl+shift+c.\nThis will install the packages into your current environment. If you want to create an isolated environment to install these packages into, then you can set up an R environment with renv by running:\ninstall.packages(\"renv\")\nrenv::init()\nInstall your packages as above, and then keep a record of what you installed by running:\nrenv::snapshot()\n\n\nRestoring provided renv\nWe have created an R environment with all the required packages and the versions we used. You can see the version of R this was set up with in the renv.lock file. To install the dependencies by copying this environment, run the following commands in your R console:\ninstall.packages(\"renv\")\nrenv::restore()",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "pages/plain_english.html",
    "href": "pages/plain_english.html",
    "title": "Plain english summary",
    "section": "",
    "text": "The analysis in this repository forms part of a technology appraisal by the National Institute for Health and Care Excellence. The purpose of an appraisal is to help inform whether the NHS should fund a new treatment. This is based on the cost-effectiveness of a treatment, as determined by comparing the health outcomes and costs resulting from this treatment, compared with other available treatments.\nThis appraisal evaluates a combination of two treatments: cabozantinib with nivolumab. It assesses whether these are cost-effective as a first-line treatment (i.e. the first treatment given for a disease, in otherwise untreated patients).\nIt is being evaluated in patients with renal cell carcinoma (RCC) which is a type of kidney cancer. Specifically, it focuses on patients with advanced RCC, which means the cancer has spread from their kidney to other areas of their body.",
    "crumbs": [
      "Model overview",
      "Plain english summary"
    ]
  },
  {
    "objectID": "pages/plain_english.html#what-does-the-analysis-do",
    "href": "pages/plain_english.html#what-does-the-analysis-do",
    "title": "Plain english summary",
    "section": "What does the analysis do?",
    "text": "What does the analysis do?\nThis diagram provides a broad summary of the steps required to perform this cost-effectiveness analysis. These are described in further detail below.\n\n\n\nBasic overview of the analysis",
    "crumbs": [
      "Model overview",
      "Plain english summary"
    ]
  },
  {
    "objectID": "pages/plain_english.html#compare-effectiveness-of-different-treatments",
    "href": "pages/plain_english.html#compare-effectiveness-of-different-treatments",
    "title": "Plain english summary",
    "section": "(1) Compare effectiveness of different treatments",
    "text": "(1) Compare effectiveness of different treatments\nClinical studies that compared different treatments for advanced RCC were identified. These studies measured outcomes like how long people survived, whether their cancer progressed, and how well their cancer responded to the treatments. The studies also looked at side effects and how the treatments impacted patients’ quality of life.\nSome treatments were not directly compared in head-to-head trials. For example, cabozantinib and pazopanib were both compared to another drug, sunitinib, in separate studies, but not directly against each other (A).\nIn these cases, a method called “network meta-analysis” can be used to estimate how two treatments might have compared to one another, if they had been included head-to-head in a trial in real life. For example, estimating the effectiveness of cabozantinib versus pazopanib, based on what is known from their seperate comparisons with sunitinib (B).\n\n\n\nNetwork meta-analysis example",
    "crumbs": [
      "Model overview",
      "Plain english summary"
    ]
  },
  {
    "objectID": "pages/plain_english.html#get-patient-outcomes-over-time-for-reference-treatment",
    "href": "pages/plain_english.html#get-patient-outcomes-over-time-for-reference-treatment",
    "title": "Plain english summary",
    "section": "(2) Get patient outcomes over time for reference treatment",
    "text": "(2) Get patient outcomes over time for reference treatment\nStudies were also found that looked at how advanced kidney cancer patients responded to treatments in the real world, outside of clinical trials. These studies provided data on things like how long patients survived and whether their cancer got worse.\nFor each stage of treatment (first-line, second-line, etc.), a “reference treatment” was chosen. This was the treatment most commonly used in practice. The outcomes for patients receiving those reference treatments were then taken from real-world data.\nHowever, because the analysis needed to predict outcomes over a long period (40 years), and the real-world data didn’t cover that entire time, a technique called “survival analysis” was used. This method estimates long-term outcomes based on the patterns observed over the shorter period covered by the data.\n\n\n\n\n\n\n\nIllustrative figure showing the proportion of patients who survived over time",
    "crumbs": [
      "Model overview",
      "Plain english summary"
    ]
  },
  {
    "objectID": "pages/plain_english.html#estimate-outcomes-over-time-for-each-treatment",
    "href": "pages/plain_english.html#estimate-outcomes-over-time-for-each-treatment",
    "title": "Plain english summary",
    "section": "(3) Estimate outcomes over time for each treatment",
    "text": "(3) Estimate outcomes over time for each treatment\nUsing the results from step (1), the real-world data can be adjusted to estimate how people might do on other treatments. This means we have predicted outcomes over time for each treatment, based on the comparison of effectiveness against the reference treatment.",
    "crumbs": [
      "Model overview",
      "Plain english summary"
    ]
  },
  {
    "objectID": "pages/plain_english.html#find-how-many-people-receive-each-treatment",
    "href": "pages/plain_english.html#find-how-many-people-receive-each-treatment",
    "title": "Plain english summary",
    "section": "(4) Find how many people receive each treatment",
    "text": "(4) Find how many people receive each treatment\nFrom the real-world data identified in step (2), we can also find the proportion of people that we expect to receive each treatment in practice.",
    "crumbs": [
      "Model overview",
      "Plain english summary"
    ]
  },
  {
    "objectID": "pages/plain_english.html#get-data-on-the-cost-and-health-utility-of-patients",
    "href": "pages/plain_english.html#get-data-on-the-cost-and-health-utility-of-patients",
    "title": "Plain english summary",
    "section": "(5) Get data on the cost and health utility of patients",
    "text": "(5) Get data on the cost and health utility of patients\nFor each treatment against advanced RCC, further studies were identified which reported either:\n\nThe costs of each treatment for the healthcare system (e.g. costs of drugs, appointments, care)\nThe quality of life for patients on or off each treatment at each line of therapy (first-line through to fourth-line). This is described using a measure called a “health utility value”.",
    "crumbs": [
      "Model overview",
      "Plain english summary"
    ]
  },
  {
    "objectID": "pages/plain_english.html#construct-an-economic-model",
    "href": "pages/plain_english.html#construct-an-economic-model",
    "title": "Plain english summary",
    "section": "(6) Construct an economic model",
    "text": "(6) Construct an economic model\nThe data from steps (3), (4) and (5) were then fed into a computer model. The model simulates what happens to groups of patients who receive each treatment: how long they live, how much their treatments cost, and what their quality of life is like. By comparing these results, decisions can be made as to which treatments offer the best combination of effectiveness and value for money.",
    "crumbs": [
      "Model overview",
      "Plain english summary"
    ]
  },
  {
    "objectID": "pages/report.html",
    "href": "pages/report.html",
    "title": "Report",
    "section": "",
    "text": "This page shares an example of the output report produced by this model and walks through each section.",
    "crumbs": [
      "Code walkthrough",
      "Report"
    ]
  },
  {
    "objectID": "pages/report.html#view-full-report",
    "href": "pages/report.html#view-full-report",
    "title": "Report",
    "section": "View full report",
    "text": "View full report\nThe model produces a .docx report, which has been converted to a PDF and displayed below.",
    "crumbs": [
      "Code walkthrough",
      "Report"
    ]
  },
  {
    "objectID": "pages/report.html#walkthrough-of-report-sections",
    "href": "pages/report.html#walkthrough-of-report-sections",
    "title": "Report",
    "section": "Walkthrough of report sections",
    "text": "Walkthrough of report sections\nTODO: Walk through and explain each section\n\nTable 1\n\n\n\nTable 1: Base-case results (ordered in increasing costs)\n\n\n\n\nTable 2\n\n\n\nTable 2: Application of the severity modifier to the base case\n\n\n\n\nTable 3 to 5\nThese tables present the life years (LY) gained by health state. They compare two treatment strategies marked X and Y.\nTable 3 compares Cabozantinib plus nivolumab against Pazopanib for the all risk group.\nTable 4 is for the favourable risk group and also compares against Pazopanib, whilst Table 5 is for the intermediate/poor risk group and the comparator is Lenvatinib plus pembrolizumab.\n\n\n\nTable 3: Summary of LY gain by health state (all risk, cabo+nivo vs next best non- dominated comparator: Pazopanib)\n\n\n\n\nTables 6 to 8\n\n\n\nTable 6: Summary of QALY gain by health state (all risk, cabo+nivo vs next best non-dominated comparator: Pazopanib)\n\n\n\n\nTable 9\n\n\n\nTable 9: Summary of costs by health state\n\n\n\n\nTables 10 to 12\n\n\n\nTable 10 : Summary of predicted resource use by category of cost (all risk, cabo+nivo vs next best non-dominated comparator: Pazopanib)\n\n\n\n\nFigures 1 to 15\n\n\n\nFigure 1: Markov trace: All risk, Cabozantinib plus nivolumab. Abbreviations: L1, 1st line; L2, 2nd line; L3, 3rd line; L4, 4th line; L5, 5th line.\n\n\n\n\nFigures 16 to 18\n\n\n\nFigure 16: Cost-effectiveness acceptability frontier – all risk\n\n\n\n\nTables 13 to 15\n\n\n\nTable 13: Scenario analysis - all risk\n\n\n\n\nTable 16\n\n\n\nTable 16: Scenario analysis pairwise comparison table",
    "crumbs": [
      "Code walkthrough",
      "Report"
    ]
  },
  {
    "objectID": "pages/report.html#viewing-the-report",
    "href": "pages/report.html#viewing-the-report",
    "title": "Report",
    "section": "Viewing the report",
    "text": "Viewing the report\nThe output report will be in .docx format, so this is best viewed within Microsoft Word. If viewed in LibreOffice, you may find the tables are misformatted (going outside the page margins so not visible). If viewed in Google Docs, you may find the figures are not visible/fail to correctly load.",
    "crumbs": [
      "Code walkthrough",
      "Report"
    ]
  },
  {
    "objectID": "pages/walkthrough_preface.html",
    "href": "pages/walkthrough_preface.html",
    "title": "Preface",
    "section": "",
    "text": "The following pages will provide a walk-through for running the Base Case EOM:RCC model, including an explanation of the:\n\nInput data\nCode in Model_Structure.R\nOutput report\n\n\n\n\n\n\n\nBonus information\n\n\n\n\n\nThese drop-down boxes appear throughout the walkthrough, and contain additional code to help walk you through what is happening (for example, explaining a function or section of code).",
    "crumbs": [
      "Code walkthrough",
      "Preface"
    ]
  },
  {
    "objectID": "pages/walkthrough_preface.html#aim-of-the-walkthrough",
    "href": "pages/walkthrough_preface.html#aim-of-the-walkthrough",
    "title": "Preface",
    "section": "",
    "text": "The following pages will provide a walk-through for running the Base Case EOM:RCC model, including an explanation of the:\n\nInput data\nCode in Model_Structure.R\nOutput report\n\n\n\n\n\n\n\nBonus information\n\n\n\n\n\nThese drop-down boxes appear throughout the walkthrough, and contain additional code to help walk you through what is happening (for example, explaining a function or section of code).",
    "crumbs": [
      "Code walkthrough",
      "Preface"
    ]
  },
  {
    "objectID": "pages/walkthrough_preface.html#adjustments",
    "href": "pages/walkthrough_preface.html#adjustments",
    "title": "Preface",
    "section": "Adjustments",
    "text": "Adjustments\nIn order to run the code from Model_Structure.R within this documentation, minor adjustments have been made such as to:\n\nAmend file paths\nInclude additional pre-run results, enabling:\n\nQuicker run times\nThe code to be split across multiple pages\n\n\nHence, it is advised that you use the original R script when running the model for yourself, rather than these .qmd files.\n\n\n\n\n\n\nFull list of adjustments\n\n\n\n\nChanged the path to the folders - e.g. “./3_Functions” to “../../../3_Functions”.\n\nInstead of amending this in each string, I created path_ variables to store the path to the folder, and then imported individual files using file.path() to combine the folder path with the file name.\nThese folder paths are all set-up in a code chunk paths after we load the required packages.\n\nSet f_excel_extract() from verbose = TRUE to verbose = FALSE, as it otherwise repeatedly prints “Extracting named range X from ../../1_Data/ID6184_RCC_model inputs FAD version [UK RWE unredacted, ACIC redacted, cPAS redacted].xlsm” where X is the name of each parameter\nAdd library(knitr) so can use kable()",
    "crumbs": [
      "Code walkthrough",
      "Preface"
    ]
  },
  {
    "objectID": "pages/walkthrough/code0b_splitmd.html",
    "href": "pages/walkthrough/code0b_splitmd.html",
    "title": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exeter Oncology Model: Renal Cell Carcinoma edition",
    "section": "",
    "text": "sed -n '/SPLITMD_CODE1_START/,/SPLITMD_CODE1_END/{/SPLITMD_CODE1_START/d;/SPLITMD_CODE1_END/d;p}' code0a_walkthrough.html.md &gt; code1.md\nsed -n '/SPLITMD_CODE2_START/,/SPLITMD_CODE2_END/{/SPLITMD_CODE2_START/d;/SPLITMD_CODE2_END/d;p}' code0a_walkthrough.html.md &gt; code2.md"
  },
  {
    "objectID": "pages/walkthrough/code1_setup.html",
    "href": "pages/walkthrough/code1_setup.html",
    "title": "Set-up",
    "section": "",
    "text": "This page contains some of the basic set-up steps like loading the functions and lots of the model inputs, as well as establishing the possible treatment sequences.",
    "crumbs": [
      "Code walkthrough",
      "Set-up"
    ]
  },
  {
    "objectID": "pages/walkthrough/code1_setup.html#load-required-packages",
    "href": "pages/walkthrough/code1_setup.html#load-required-packages",
    "title": "Set-up",
    "section": "Load required packages",
    "text": "Load required packages\n\n#### 1. Installation ###########\n#### This code has been created using R version 4.3.1\n#### All packages used by this model are provided here\n\n#### Comment out the below section which installs the relevant packages after the first run of the model\n# install.packages(\"shiny\", quiet = TRUE)   ### the quiet argument is used to avoid warnings appearing in the console (useful for later conversion to web app)\n# install.packages(\"gtools\", quiet = TRUE)\n# install.packages(\"openxlsx\", quiet = TRUE)\n# install.packages(\"flexsurv\", quiet = TRUE)\n# install.packages(\"tidyverse\", quiet = TRUE)\n# install.packages(\"data.table\", quiet = TRUE)\n# install.packages(\"heemod\", quiet = TRUE)\n# install.packages(\"logOfGamma\", quiet = TRUE)\n# install.packages(\"ggplot2\", quiet = TRUE)\n# install.packages(\"survminer\", quiet = TRUE)\n# install.packages(\"officer\", quiet = TRUE)\n# install.packages(\"officedown\", quiet = TRUE)\n# install.packages(\"magrittr\", quiet = TRUE)\n# install.packages(\"Hmisc\", quiet = TRUE)\n# install.packages(\"future.apply\", quiet = TRUE)\n# install.packages(\"crosstable\", quiet = TRUE)\n# install.packages(\"flextable\", quiet = TRUE)\n# install.packages(\"stringr\", quiet = TRUE)\n# install.packages(\"BCEA\", quiet = TRUE)\n# install.packages(\"collapse\", quiet = TRUE)\n# install.packages(\"scales\", quiet = TRUE)\n# install.packages(\"Matrix\", quiet = TRUE)\n# install.packages(\"dplyr\", quiet = TRUE)\n# install.packages(\"progressr\", quiet = TRUE)\n# install.packages(\"microbenchmark\", quiet = TRUE)\n\n### Loading libraries \n\n#### This section needs to be run every time and calls each package from the library \nlibrary(shiny, quiet = TRUE)   \nlibrary(gtools, quiet = TRUE)\nlibrary(openxlsx, quiet = TRUE)\nlibrary(flexsurv, quiet = TRUE)\nlibrary(tidyverse, quiet = TRUE)\nlibrary(data.table, quiet = TRUE)\nlibrary(heemod, quiet = TRUE)\nlibrary(logOfGamma, quiet = TRUE)\nlibrary(ggplot2, quiet = TRUE)\nlibrary(survminer, quiet = TRUE)\nlibrary(officer, quiet = TRUE)\nlibrary(officedown, quiet = TRUE)\nlibrary(magrittr, quiet = TRUE)\nlibrary(Hmisc, quiet = TRUE)\nlibrary(future.apply, quiet = TRUE)\nlibrary(crosstable, quiet = TRUE)\nlibrary(flextable, quiet = TRUE)\nlibrary(stringr, quiet = TRUE)\nlibrary(BCEA, quiet = TRUE)\nlibrary(collapse, quiet = TRUE)\nlibrary(scales, quiet = TRUE)\nlibrary(Matrix, quiet = TRUE)\nlibrary(dplyr, quiet = TRUE)\nlibrary(progressr, quiet = TRUE)\nlibrary(microbenchmark, quiet = TRUE)\nlibrary(knitr, quiet = TRUE)",
    "crumbs": [
      "Code walkthrough",
      "Set-up"
    ]
  },
  {
    "objectID": "pages/walkthrough/code1_setup.html#set-file-paths",
    "href": "pages/walkthrough/code1_setup.html#set-file-paths",
    "title": "Set-up",
    "section": "Set file paths",
    "text": "Set file paths\n\n# Set path to folders\nd_path = \"../../../1_Data\"\nf_path = \"../../../3_Functions\"\no_path = \"../../../4_Output\"",
    "crumbs": [
      "Code walkthrough",
      "Set-up"
    ]
  },
  {
    "objectID": "pages/walkthrough/code1_setup.html#define-some-of-the-model-settings",
    "href": "pages/walkthrough/code1_setup.html#define-some-of-the-model-settings",
    "title": "Set-up",
    "section": "Define some of the model settings",
    "text": "Define some of the model settings\nThe majority of this code block is dedicated to setting the model to run sequentially or in parallel. If running the base case using Model_Structure.R as provided (e.g. with pre-run survival analysis), you may find that the quickest option is to run the model sequentially. This is already set up by default, with keep_free_cores &lt;- NA. For reference, the run time for this on an Intel Core i7-12700H with 32GB RAM running Ubuntu 22.04.4 Linux was 40 minutes.\n\n# Multi-core processing:\n# \n# Instructions.\n# \n# This model is highly RAM intensive. You need a lot of RAM on your computer\n# to run this model due to the large amount of very large matrix multiplications\n# (up to approximately 15,000 discrete health states in the model). Therefore,\n# in order to efficiently run the model, it is a balancing act between RAM\n# usage and CPU usage. \n# \n# Some rough guidance is:\n# \n# - If you have 8GB of RAM on your computer, you can run this model with 2 cores only\n#   but it may even be faster to run in series if you have other things open on your\n#   computer at the same time. Therefore, please set keep_free_cores to NA and run\n#   the model in series. This is because when the RAM on your computer runs out\n#   your computer will use the hard-disk instead which is extremely slow.\n# - If you have 16GB of RAM on your computer, parallel should be a lot faster.\n#   On my laptop (I7 8th gen, 16GB RAM, running Linux for low RAM usage) I can\n#   run with 5 cores whilst using about 12GB of RAM running this model. \n# - if you have 24GB or 32GB of RAM, you should be able to run the model with 8\n#   and up to around 14 cores before running out of RAM whilst running the model.\n# - if you are using a HPC, you should be able to run this model with many cores\n#   due to the typically large amount of RAM available per core in a HPC\n# \n# \n# IF YOU DO NOT WANT MULTICORE SET keep_free_cores TO NA\n# \n# \nkeep_free_cores &lt;- NA\nif (any(is.na(keep_free_cores), keep_free_cores&lt;0)) {\n  plan(sequential)\n} else {\n  plan(multisession(workers = max(availableCores()-keep_free_cores,1)))\n}\n\nThe three settings in this code block:\n\nprogressr::handlers(\"progress\") - one of the settings for how progress is reported whilst code is running\ncrosstable::options(crosstable_units=\"cm\") - the crosstable package generates descriptive statistics with function crosstable(), and this sets the unit for it, although it should be noted that this appears to be legacy code as it doesn’t appear that crosstable() is used anywhere in the repository\nqc_mode - the input for verbose in f_NMA_AddAssumptionsToNetwork() which, if true, will mean that extra outputs are printed to the console\n\n\n# Other generic settings for the progress bar and units for table widths\nhandlers(\"progress\")\noptions(crosstable_units=\"cm\")\n\n#### 2. Loading functions ###########\n\n\n# This variable is used throughout the model to define whether to provide additional outputs useful for QC or not\n# The model will take longer to run when this is set to TRUE\nqc_mode &lt;- FALSE",
    "crumbs": [
      "Code walkthrough",
      "Set-up"
    ]
  },
  {
    "objectID": "pages/walkthrough/code1_setup.html#import-model-functions",
    "href": "pages/walkthrough/code1_setup.html#import-model-functions",
    "title": "Set-up",
    "section": "Import model functions",
    "text": "Import model functions\nThe functions for the analysis in Model_Structure.R are stored in the 3_Functions/ folder. Here, they are imported into our environment.\n\n# 2.1. Excel data extraction functions -----------------------------------------\n\n#### These functions are used to extract parameters from the Excel input workbook for use in R\n#### During Phase 2 a Shiny front-end will be added to the model which will allow an alternative mechanism to upload these types of inputs\n\nsource(file.path(f_path, \"excel/extract.R\"))\n\n# 2.2. Treatment sequencing functions ----------------------------------------\n\n#### Function: filter to active treatments and lines\n##### Takes as an input the defined sequences, evaluation type and line to start the evaluation from \n##### Other input is % receiving each subs therapy at each line dependent on previous treatments received \n##### Reweights so that the % receiving each treatment sums to 100% within each arm / line being studied\n##### Outputs a matrix that has the % receiving each possible combination\n\nsource(file.path(f_path, \"sequencing/sequences.R\"))\n\n# 2.3. Survival analysis functions ---------------------------------------------\n\n# Function: conduct survival analysis\n##### by treatment, line, population and outcome fitted survival curves using Flexsurvreg (exp, Weibull, lognormal, loglog, Gompertz, gen gamma)\n##### calculation of and adjustment for general population\n##### adjustment for treatment effect waning\n\nsource(file.path(f_path, \"survival/Survival_functions.R\"))\nsource(file.path(f_path, \"survival/other_cause_mortality.R\"))\nsource(file.path(f_path, \"survival/treatment_effect_waning.R\"))\n\n# 2.4 Misc functions ----------------------------------------------------------\n\n### these functions enable smoother data cleaning and manipulation\n\nsource(file.path(f_path, \"misc/other.R\"))\nsource(file.path(f_path, \"misc/shift_and_pad.R\"))\nsource(file.path(f_path, \"misc/cleaning.R\"))\n\n# 2.4.1 Functions imposing list structures -----------------------------------\n\nsource(file.path(f_path, \"misc/nesting.R\"))\nsource(file.path(f_path, \"misc/discounting.R\"))\nsource(file.path(f_path, \"misc/qdirichlet.R\"))\nsource(file.path(f_path, \"misc/plotting.R\"))\nsource(file.path(f_path, \"misc/structure.R\"))\n\n# 2.4.2 Functions calculating HRs from FPNMA coefficients and other FPNMA manipulation ------\n\nsource(file.path(f_path, \"misc/fpnma_fns.R\"))\n\n\n# 2.5 Utility functions -------------------------------------------------------\n\nsource(file.path(f_path, \"utility/age_related.R\"))\nsource(file.path(f_path, \"costs_and_QALYs/utility_processing.R\"))\n\n# 2.6 AE functions --------------------------------------------------------\n\nsource(file.path(f_path, \"adverse_events/AE_steps.R\"))\n\n# 2.7 Cost calculation functions --------------------------------------------\n\nsource(file.path(f_path, \"costs_and_QALYs/cost_processing.R\"))\n\n\n# 2.8 State transition modelling functions --------------------------------\n\nsource(file.path(f_path, \"markov/markov.R\"))\n\n# 2.9 Patient flow functions ----------------------------------------------\n\nsource(file.path(f_path, \"patient_flow/overarching.R\"))\nsource(file.path(f_path, \"patient_flow/partitioned_survival.R\"))\nsource(file.path(f_path, \"patient_flow/markov.R\"))\nsource(file.path(f_path, \"patient_flow/drug_costs.R\"))\nsource(file.path(f_path, \"patient_flow/hcru_costs.R\"))\nsource(file.path(f_path, \"patient_flow/qalys.R\"))\nsource(file.path(f_path, \"patient_flow/ae.R\"))\n\n\n\n# 2.10 Results processing functions ---------------------------------------\n\nsource(file.path(f_path, \"results/incremental_analysis.R\"))\nsource(file.path(f_path, \"results/model_averaging.R\"))\nsource(file.path(f_path, \"results/partitioned_survival.R\"))\nsource(file.path(f_path, \"misc/severity_modifier.R\"))\nsource(file.path(f_path, \"results/results_tables.R\"))\nsource(file.path(f_path, \"psa/psa functions.R\"))\n\n\n\n# 2.11 Office software outputs --------------------------------------------\n\nsource(file.path(f_path, \"reporting/word_document_output.R\"))",
    "crumbs": [
      "Code walkthrough",
      "Set-up"
    ]
  },
  {
    "objectID": "pages/walkthrough/code1_setup.html#get-some-of-the-model-inputs",
    "href": "pages/walkthrough/code1_setup.html#get-some-of-the-model-inputs",
    "title": "Set-up",
    "section": "Get some of the model inputs",
    "text": "Get some of the model inputs\n\nIntroductory comments\nThis section of the code is mostly comments that describe:\n\nThe structure of i which contains model inputs\nThat survival analysis will be conducted using state transition (markov) models and partitioned survival analysis (partSA)\nThe five input files, which are detailed within the documentation on the page Input data\n\nThere is a line of code to define User_types, but this appears to be legacy as it is not used anywhere.\n\n# 3. Model inputs structure --------------------------------------------------\n\n# Model inputs should be in a list called i. This list then contains all of the\n# inputs for the model, NOT the parameters used to calculate the model. In effect,\n# this is a place to store all model information BEFORE it gets boiled down to\n# what's needed to run 1 model.\n# \n# using i allows subsetting by categorisation, which makes things a lot easier\n# to find and avoids all long variable names\n# \n# the structure of i should be by category. There are the following \n# categories:\n# \n# dd - dropdown inputs taken from Excel\n# i - parameter inputs taken from Excel\n# r_ tables taken from Excel\n# List, id and lookup - lists defined and used within the code\n# basic - basic inputs (time horizon, cycle length, discount rates, so on so forth)\n# surv  - survival analysis inputs including raw data\n# sequences and seq - inputs and outputs related to the possible sequences of treatments\n# cost  - drug and hcru costs. All costs are here to keep things together (dosing is not cost)\n# util and QALYs  - utility and QALY inputs\n# misc  - misc inputs e.g. graph labelling\n# \n\n#### 3.1 Loading input parameters ###########\n\n# This model allows two possible structures to be analysed: state transition with a user definable number of lines\n# with health states based on time to discontinuation (drug costs) and progression status (quality of life and movement \n# between lines) and PartSA with 3 health states (pre-progression, post-progression and death)\n\n# During Phase 1 of this pilot we use the model to evaluate the decision problem for a single therapy \n# (cabo+nivo, defined as molecule 1) starting at 1st line\n# During Phase 2 we will adapt this code to evaluate the cost-effectiveness of sequences starting at a user-defined line\n\n# Inputs to this model need to be downloaded from NICEdocs \n\nUser_types &lt;- c(\"Submitting company\", \"NICE\", \"EAG\", \"Committee\", \"NHSE\", \"Clinical expert\", \"Patient expert\", \"Non-intervention stakeholder\", \"Public\")\n\n# The submitting company are able to see their own CIC and AIC data (marked up blue / yellow in reporting but not anything else: green marking\n# green marked data has been either be replaced with 0 [PAS discounts, RWE IPD] or dummy data)\n# NICE users will be able to see everything\n# Other users will not be able to see any marked data, this is replaced with dummy data\n\n# The way raw data is fed into the model currently works as follows\n# Define the path to where the data file lives using the select file functionality\n\n# The model then processes the file the user selected\n\n# There are a number of files which contain raw or intermediate inputs:\n# 1. The Excel user interface - this contains information from company data and the UK RWE\n# 2. The proportional hazards NMA CODA RDS file - this contains information from company data\n# 3. The fractional polynomials NMA RDS file - this contains information from company data \n# 4. Either the raw data file containing the pseudo-IPD for all trials for survival analysis (RWE and company data included); or\n# 5. The RDS output from the survival analysis using both RWE and company data\n\n# You will need to manually select the inputs file relevant to your user type, this is not stored on Github as access to CIC information differs by user type\n\n\n\nGet inputs from excel workbook and save as list i\nImport the file at excel_path using f_excel_extract(), and then tidy i$R_table_param using f_excel_cleanParams().\nIf the file doesn’t exist, assuming the user is in RStudio, a dialog box will appear with the system files, and the user should then select a file from their directory. The dialog will open in 1_Data/, show only .xlsm files, and the accept/ok button has the text ID6184_RCC_model inputs....xlsm.\n\n# The first part of this code pulls all of the named ranges from the excel workbook, expand the parameters table\n\n#Option to define Excel path on local machine - comment in this and comment out the code below to select file\nexcel_path &lt;- file.path(d_path, \"ID6184_RCC_model inputs FAD version [UK RWE unredacted, ACIC redacted, cPAS redacted].xlsm\")\n#i &lt;- f_excel_extract(excel_path, verbose = TRUE)\n\nif (file.exists(excel_path)) {\n  i &lt;- f_excel_extract(excel_path, verbose = FALSE)\n} else {\n  i &lt;- f_excel_extract(rstudioapi::selectFile(\n    caption = \"Select the Excel inputs file (ID6184_RCC_model inputs....xlsm)\",\n    label = \"ID6184_RCC_model inputs....xlsm\",\n    path = \"./1_Data/\",\n    filter = \"Excel Files (*.xlsm)\",\n    existing = TRUE\n  ), verbose = FALSE)\n}\n\ni &lt;- c(i,f_excel_cleanParams(i$R_table_param))\n\n\n\n\n\n\n\nWhat does f_excel_extract() do?\n\n\n\n\n\nThis function uses openxlsx::getNamedRegions() to find named regions in the workbook. These are all stored in a sheet called named ranges. As illustrated in Input data, these consist of two columns:\n\nA name for the region (e.g. List_pop1_allowed)\nThe region, which consists of the: sheet, column/s and row/s (e.g. =Lists!$BA$11:$BA$22)\n\n\nThe function f_excel_extract() extracts each of these, saving them into a nested list called i. Each element in the list is a row from the named ranges sheet - for example:\n\ni$List_pop1_allowed\n\n [1] \"avelumab_plus_axitinib\"      \"axitinib\"                   \n [3] \"cabozantinib\"                \"everolimus\"                 \n [5] \"lenvatinib_plus_everolimus\"  \"cabozantinib_plus_nivolumab\"\n [7] \"nivolumab_monotherapy\"       \"pazopanib\"                  \n [9] \"sunitinib\"                   \"tivozanib\"                  \n\n\nThe exception is the first element which is a copy of the named ranges sheet:\n\nkable(head(i[[1]]))\n\n\n\n\n\n\n\n\nName\nCell.Range\n\n\n\n\napply_waning_to\n=Lists!$Y\\(10:\\)Y\\(11      |\n|bc_settings_rng        |=Lists!\\)B\\(99:\\)B\\(174     |\n|cabo_nivo_outcome_from |=Lists!\\)W\\(10            |\n|cabo_nivo_outcomes     |=Lists!\\)X\\(10:\\)X\\(12      |\n|count_bc_settings      |=Lists!\\)B\\(97            |\n|dd_2ndline_NMA         |='Model settings'!\\)G$40\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat does f_excel_cleanParams() do?\n\n\n\n\n\nThis function is applied to i$R_table_param which is the full table from the sheet All parameters.\n\nkable(head(i$R_table_param))\n\n\n\n\n\n\n\n\n\nParameter.description\nParameter.name\nMean.current.value\n\n\n\n\nInclude cabo nivo? (1=yes, 0=no)\ncabo_nivo_include\n1\n\n\nInclude pem len? (1=yes, 0=no)\npem_len_include\n1\n\n\nInclude panzopanib? (1=yes, 0=no)\npazopanib_include\n1\n\n\nInclude tivozanib? (1=yes, 0=no)\ntivozanib_include\n1\n\n\nInclude sunitinib? (1=yes, 0=no)\nsunitinib_include\n1\n\n\nInclude cabo monotherapy? (1=yes, 0=no)\ncabo_include\n1\n\n\n\n\n\nThe function f_excel_cleanParams():\n\nConverts each row of the table into a list, with value from Parameter.name used as the list name\nAdds Mean which is simply Mean.current.value converted to numeric\n\nThese lists were then concatenated with i, so we can access them from i as follows:\n\ni$cabo_nivo_include\n\n$Parameter.description\n[1] \"Include cabo nivo? (1=yes, 0=no)\"\n\n$Parameter.name\n[1] \"cabo_nivo_include\"\n\n$Mean.current.value\n[1] \"1\"\n\n$Mean\n[1] 1\n\n\n\n\n\n\n\nManually add some extra inputs to i\n\n# Set which decision problem to look at, initially functionality has been geared towards the decision problem for cabozantinib plus nivolumab\ni$decision_problem &lt;- \"cabo+nivo\"\n\n# We then create a place for identifiers. Adding in an object to i full of lookup tables makes automated translation\n# possible even when one doesn't know the number of items ex ante, or how they combine.\n# \n# If the lookup table is correct one can translate id numbers to text strings which are\n# consistent throughout the entire model. This is extremely useful as the model can\n# be expanded to any number of treatments and potentially even any number of lines \n# (up to a reasonable maximum)\n\ni$id     &lt;- list(ipd = list())\ni$lookup &lt;- list(ipd = list())\n\n# Add distribution names to i\n# This model only includes standard parametric distributions as more complex distributions were not deemed to be required for the included treatments\n\ni$distnames &lt;- \n  c(\n    gengamma      = \"gengamma\",\n    exp           = \"exp\",\n    weibull       = \"weibull\",\n    lnorm         = \"lnorm\",\n    gamma         = \"gamma\",\n    gompertz      = \"gompertz\",\n    llogis        = \"llogis\"\n  )\n\n\n\nUse i to make another list p\nThe list p is based on i, either copying over parameters or using them to calculate new parameters. The list is first created by f_misc_param_generate_p(). A few extra additions are then made to p in this code block, such as to set a maximum of 4 treatment lines before best supportive care.\n\n# The next step is to then \"tidy up\" i into another object, p. p doesn't necessarily\n# have to house everything, only things that will change in PSA\n\np &lt;- f_misc_param_generate_p(i)\n\n# Set seed for PSA - note this is done in the script to run the PSA, not here!\n# set.seed(1475)\n\n# Max lines within the R model\np$basic$R_maxlines &lt;- 4\n\n# Pass this into p so that p can be used to exclusively compute the model:\np$basic$decision_problem &lt;- i$decision_problem\n\n\n\n\n\n\n\nWhat does f_misc_param_generate_p() do?\n\n\n\n\n\nThis function consists of relatively simple calculations using parameters from i to generate p. For the full overview of these calculations, check out the code for the function. To give an example though, the function code includes:\np &lt;- list(\n    basic = list(\n      th   = ceiling(i$ui_time_horizon * 365.25 / 7), \n      th_y = i$ui_time_horizon, \n      ...\n    )\n    ...\n)\nIn this example, we can see that is makes a copy of i$ui_time_horizon which has time horizon of model in years (40 years) (p$basic$th_y). It also converts the time horizon into weeks (p$basic$th).\n\ni$ui_time_horizon\n\n[1] 40\n\np$basic$th\n\n[1] 2088\n\np$basic$th_y\n\n[1] 40",
    "crumbs": [
      "Code walkthrough",
      "Set-up"
    ]
  },
  {
    "objectID": "pages/walkthrough/code1_setup.html#treatment-sequences",
    "href": "pages/walkthrough/code1_setup.html#treatment-sequences",
    "title": "Set-up",
    "section": "Treatment sequences",
    "text": "Treatment sequences\n\nFind all possible sequences\nThe first step in determining the possible treatment sequences is to determine all possible combinations and orders of treatment, saving this as i$sequences.\n\n#### 3.2 Define sequences  ###########\n\n#### This code produces a list of possible sequences per population based upon the rules defined for RCC\n#### and the user input number of lines\n\n\n# Add drug names to comparators vector extracted from inputs list.\n\ni$sequences &lt;- f_generate_sequences(\n  comparators = i$List_comparators, \n  maxlines    = p$basic$R_maxlines\n)\n\n\n\n\n\n\n\nWhat does f_generate_sequences() do?\n\n\n\n\n\nThe input to this function is a list of all the possible treatments (14 options), and the maximum number of treatment lines (4).\n\ni$List_comparators\n\n [1] \"nivolumab_monotherapy\"         \"cabozantinib_plus_nivolumab\"  \n [3] \"nivolumab_plus_ipilimumab\"     \"lenvatinib_plus_pembrolizumab\"\n [5] \"avelumab_plus_axitinib\"        \"pazopanib\"                    \n [7] \"tivozanib\"                     \"sunitinib\"                    \n [9] \"cabozantinib\"                  \"lenvatinib_plus_everolimus\"   \n[11] \"everolimus\"                    \"axitinib\"                     \n[13] \"sorafenib\"                     \"placebo_BSC\"                  \n\n\nThe function f_generate_sequences() outputs a table saved as i$sequences. This contains every possible order and combination of treatments.\n\nkable(head(i$sequences, 3))\n\n\n\n\n\n\n\n\n\n\n\nV1\nV2\nV3\nV4\nV5\n\n\n\n\navelumab_plus_axitinib\naxitinib\ncabozantinib\ncabozantinib_plus_nivolumab\nBSC\n\n\navelumab_plus_axitinib\naxitinib\ncabozantinib\neverolimus\nBSC\n\n\navelumab_plus_axitinib\naxitinib\ncabozantinib\nlenvatinib_plus_everolimus\nBSC\n\n\n\n\ndim(i$sequences)\n\n[1] 26404     5\n\n\nThese varied from a single treatment to up to four subsequent treatments, but always ended with best supportive case (BSC).\n\nkable(head(i$sequences[i$sequences$V3==\"\",], 3))\n\n\n\n\nV1\nV2\nV3\nV4\nV5\n\n\n\n\navelumab_plus_axitinib\nBSC\n\n\n\n\n\naxitinib\nBSC\n\n\n\n\n\ncabozantinib\nBSC\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter to valid sequences\nThe table of all possible treatment sequences is then filtered down to valid sequences (for example, removing drugs if not allowed for a given population, or after another particular drug).\n\n\n# restrict the pathways to those that are possible and permitted.\ni$sequences &lt;- as.data.frame(i$sequences)\n\npopulations &lt;- i$i_nr_populations\n\nseqs &lt;- NULL\ninvisible(\n for (population in 1:populations) {\n  cat(\"Applying sequence restrictions to population\", population,\"\\n\")\n  \n  s &lt;- f_path_tx_restrict(\n    sequences                = i$sequences,\n    allowed                  = f_get_allowed_lists(i, population), #overall list of allowed drugs in this popn\n    L1                       = f_get_L1_lists(i, population), # 1L drugs allowed in this popn\n    L2                       = f_get_L2_lists(i, population), # 2L drugs allowed in this popn\n    L3                       = f_get_L3_lists(i, population), # 3L drugs allowed in this popn\n    L4                       = f_get_L4_lists(i, population), # 4L drugs allowed in this popn\n    only_after               = f_get_only_after_lists(i, population), #list of restrictions where tx can be only after the listed txs\n    not_immediate_after      = f_get_not_immediate_after_lists(i, population), #list of restrictions where tx can be only immediately before the listed txs\n    one_in_list              = f_get_one_in_list_lists(i, population), #list of restrictions where only one of the tx in each list is allowed \n    only_after_one           = f_get_only_after_one_lists(i, population), #list of restrictions where only one of the listed treatments is allowed prior to current therapy \n    L2_only_after            = f_get_2L_only_after_lists(i, population), #list of 2L+ restrictions: if drug is used 2L, 3L or 4L, can only be after drug x\n    L2_only_immediate_after  = f_get_2L_only_immediate_after_lists(i, population), #list of 2L+ restrictions: if drug is used 2L, 3L or 4L, can only be immediately after drug x\n    L2_only_one              = f_get_2L_only_one_lists(i, population) #list of 2L+ drugs where only one of them allowed in a given sequence\n  )\n  s &lt;- cbind(rep(paste0(\"pop\", population),nrow(s)), s)\n  colnames(s) &lt;- paste0('V', seq_len(ncol(s))) # rbind no longer likes un-named columns so added this\n  seqs &lt;- rbind(seqs, s)\n} \n)\nrownames(seqs) &lt;- NULL\n\ni$sequences &lt;- seqs\n\n#### Uncomment this code to view the sequences and write the sequences defined to csv\n\n# i$sequences\n# write.csv(seqs, \"4_Output/sequences.csv\", row.names = F)\nrm(s, seqs, populations)\n\n# define number of cycles and a vector of the cycles \n\n\n\n\n\n\n\nAbout the populations being looped through\n\n\n\n\n\nThis code chunk restricted to valid sequences by population. In this analysis, there are four populations defined by time since an immuno-oncology (IO) treatment, and International Metastatic Renal Cell Carcinoma Database Consortium (IMDC) risk status. They are:\n\npop1 &gt;12m since IO, favourable risk\npop2 &gt;12m since IO, intermediate/poor risk\npop3 &lt;12m since IO, favourable risk\npop4 &lt;12m since IO, intermediate/poor risk\n\nEach risk group has to be broken down by time since IO as there are five treatments that cannot be used within 12 months of an adjuvant IO treatment (4.3.5.6 in Assessment Report [1]). An adjuvant treatment is one given alongside the primary treatment.\n\n\n\n\n\n\n\n\n\nWhat criteria are there for valid treatments?\n\n\n\n\n\n\nBy population and line\nFor each population, there are a list of valid treatments at each line of therapy (first-line through to fourth). For example, valid first-line treatments for population 1 are:\n\n# Pop1 1L treatments\nf_get_L1_lists(i, 1)\n\n[1] \"avelumab_plus_axitinib\"      \"cabozantinib_plus_nivolumab\"\n[3] \"pazopanib\"                   \"sunitinib\"                  \n[5] \"tivozanib\"                  \n\n\n\n\nOnly after\nThere are some treatments that can only come after other treatments. For example, for population 1:\n\nAxitinib can only be administered after a tyrosine kinase inhibitor (TKI) or cytokine treatment\nEverolimus can only be administered after a vascular endothelial growth factor (VEGF) treatment\nAt 2L 3L or 4L, cabozantinib can only be administered after one of the listed treatments\n\n\nf_get_only_after_lists(i, 1)\n\n$axitinib\n[1] \"avelumab_plus_axitinib\"        \"cabozantinib\"                 \n[3] \"lenvatinib_plus_everolimus\"    \"cabozantinib_plus_nivolumab\"  \n[5] \"pazopanib\"                     \"lenvatinib_plus_pembrolizumab\"\n[7] \"sunitinib\"                     \"tivozanib\"                    \n\n$everolimus\n[1] \"avelumab_plus_axitinib\"        \"axitinib\"                     \n[3] \"cabozantinib\"                  \"lenvatinib_plus_everolimus\"   \n[5] \"cabozantinib_plus_nivolumab\"   \"pazopanib\"                    \n[7] \"lenvatinib_plus_pembrolizumab\" \"sunitinib\"                    \n[9] \"tivozanib\"                    \n\nf_get_2L_only_after_lists(i, 1)\n\n$cabozantinib\n[1] \"avelumab_plus_axitinib\"        \"axitinib\"                     \n[3] \"lenvatinib_plus_everolimus\"    \"cabozantinib_plus_nivolumab\"  \n[5] \"pazopanib\"                     \"lenvatinib_plus_pembrolizumab\"\n[7] \"sunitinib\"                     \"tivozanib\"                    \n\n\n\n\nNot immediately after\nSome treatments cannot come immediately after another treatment. For example, for population 1:\n\nLenvatinib plus everolimus must not come immediately after nivolumab plus ipilimumab\nAt 2L 3L or 4L, pazopanib and sunitinib and tivozanib must not come immediately after their respective listed treatments\n\n\nf_get_not_immediate_after_lists(i, 1)\n\n$lenvatinib_plus_everolimus\n[1] \"nivolumab_plus_ipilimumab\"\n\nf_get_2L_only_immediate_after_lists(i, 1)\n\n$pazopanib\n[1] \"avelumab_plus_axitinib\"        \"lenvatinib_plus_pembrolizumab\"\n[3] \"cabozantinib_plus_nivolumab\"   \"nivolumab_plus_ipilimumab\"    \n\n$sunitinib\n[1] \"avelumab_plus_axitinib\"        \"lenvatinib_plus_pembrolizumab\"\n[3] \"cabozantinib_plus_nivolumab\"   \"nivolumab_plus_ipilimumab\"    \n\n$tivozanib\n[1] \"avelumab_plus_axitinib\"        \"lenvatinib_plus_pembrolizumab\"\n[3] \"cabozantinib_plus_nivolumab\"   \"nivolumab_plus_ipilimumab\"    \n\n\n\n\nOnly one from list\nSome treatments are not allowed if another has already been given at any point prior.\nFor example, for population 1 there are five lists of treatments where only one treatment from each list is allowed.\nThere are no restrictions like this for population 1 specific to just 2L 3L or 4L treatments (hence, empty list).\n\nf_get_one_in_list_lists(i, 1)\n\n$axitinib\n[1] \"avelumab_plus_axitinib\" \"axitinib\"              \n\n$cabozantinib\n[1] \"cabozantinib\"                \"cabozantinib_plus_nivolumab\"\n\n$everolimus\n[1] \"lenvatinib_plus_everolimus\" \"everolimus\"                \n\n$io\n[1] \"avelumab_plus_axitinib\"        \"nivolumab_plus_ipilimumab\"    \n[3] \"cabozantinib_plus_nivolumab\"   \"nivolumab_monotherapy\"        \n[5] \"lenvatinib_plus_pembrolizumab\"\n\n$nivolumab\n[1] \"nivolumab_plus_ipilimumab\"   \"cabozantinib_plus_nivolumab\"\n[3] \"nivolumab_monotherapy\"      \n\n$TKIs\n[1] \"sunitinib\" \"pazopanib\" \"tivozanib\"\n\nf_get_2L_only_one_lists(i, 1)\n\nnamed list()\n\n\n\n\nOnly one allowed before\nIn other cases, a treatment is not allowed if more than one of a particular category of treatment has been given. For example, for population 1:\n\nOf the listed treatments, only one is allowed before lenvatinib plus everolimus\n\n\nf_get_only_after_one_lists(i, 1)\n\n$lenvatinib_plus_everolimus\n[1] \"avelumab_plus_axitinib\"        \"axitinib\"                     \n[3] \"cabozantinib\"                  \"cabozantinib_plus_nivolumab\"  \n[5] \"pazopanib\"                     \"lenvatinib_plus_pembrolizumab\"\n[7] \"sunitinib\"                     \"tivozanib\"                    \n\n\n\n\n\n\n\n\n\n\n\n\nWhat does f_path_tx_restrict() do?\n\n\n\n\n\nThe function f_path_tx_restrict() is defined in sequences.R (there is also a function of the same name in rccFunctions.R but this is not sourced).\nIts purpose is to restrict the table of all possible sequences to just the valid sequences for each population, restricting it from 26404 rows with possible treatment sequences to just 744.\n\ndim(i$sequences)\n\n[1] 26404     5\n\n\nThe inputs to this function are lists defining valid treatments by different criteria (e.g. line of therapy, subsequent treatments), as detailed in the note above.\nWithin f_path_tx_restrict(), there are then several other functions which take these lists and use them to remove invalid sequences from the table.\nFor example, the allowed treatments identified using f_get_allowed_lists() are input to f_path_tx_restrict() as allowed. The function f_path_allowed() then uses that list to remove invalid drugs for a given population:\ns &lt;- f_path_allowed(s, allowed[[1]])\nLooking at an excerpt of the code for f_path_allowed(), we can see that is adds “BSC” and no treatment (““) as valid options, and then only keeps rows if their treatments are in (%in%) the list of valid treatments.\nrule &lt;- c(rule, \"BSC\", \"\")\n\nfor (n in 1:ncol(perms)) {\n  perms &lt;- perms[perms[,n] %in% rule,]\n}\n\n\n\n\n\n\n\n\n\nView the sequence restrictions applied\n\n\n\n\n\n\n\nApplying sequence restrictions to population 1 \nDropping drugs not allowed for this population.\napplying rule: avelumab_plus_axitinib axitinib cabozantinib everolimus lenvatinib_plus_everolimus cabozantinib_plus_nivolumab nivolumab_monotherapy pazopanib sunitinib tivozanib are only allowed treatments.\nPermutations before applying rule: 26404 \nPermutations after applying rule : 5860 \napplying rule: drug line restrictions.\nPermutations before applying rule: 5860 \nPermutations after applying rule : 628 \n[1] \"axitinib\"\napplying rule. axitinib is only allowed after avelumab_plus_axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 628 \nPermutations after applying rule : 628 \n[1] \"everolimus\"\napplying rule. everolimus is only allowed after avelumab_plus_axitinib axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 628 \nPermutations after applying rule : 628 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule. lenvatinib_plus_everolimus is not allowed immediately after nivolumab_plus_ipilimumab \nPermutations before applying rule: 628 \nPermutations after applying rule : 628 \n[1] \"axitinib\"\napplying rule axitinib : avelumab_plus_axitinib axitinib cannot be in one permutation\nPermutations before applying rule: 628 \nPermutations after applying rule : 559 \n[1] \"cabozantinib\"\napplying rule cabozantinib : cabozantinib cabozantinib_plus_nivolumab cannot be in one permutation\nPermutations before applying rule: 559 \nPermutations after applying rule : 520 \n[1] \"everolimus\"\napplying rule everolimus : lenvatinib_plus_everolimus everolimus cannot be in one permutation\nPermutations before applying rule: 520 \nPermutations after applying rule : 452 \n[1] \"io\"\napplying rule io : avelumab_plus_axitinib nivolumab_plus_ipilimumab cabozantinib_plus_nivolumab nivolumab_monotherapy lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 452 \nPermutations after applying rule : 400 \n[1] \"nivolumab\"\napplying rule nivolumab : nivolumab_plus_ipilimumab cabozantinib_plus_nivolumab nivolumab_monotherapy cannot be in one permutation\nPermutations before applying rule: 400 \nPermutations after applying rule : 400 \n[1] \"TKIs\"\napplying rule TKIs : sunitinib pazopanib tivozanib cannot be in one permutation\nPermutations before applying rule: 400 \nPermutations after applying rule : 202 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule: lenvatinib_plus_everolimus can only be after ONE of avelumab_plus_axitinib axitinib cabozantinib cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 202 \nPermutations after applying rule : 182 \n[1] \"cabozantinib\"\napplying rule: cabozantinib as 2L+ only allowed after avelumab_plus_axitinib axitinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 182 \nPermutations after applying rule : 182 \n[1] \"pazopanib\"\napplying rule: pazopanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 182 \nPermutations after applying rule : 172 \n[1] \"sunitinib\"\napplying rule: sunitinib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 172 \nPermutations after applying rule : 162 \n[1] \"tivozanib\"\napplying rule: tivozanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 162 \nPermutations after applying rule : 152 \nApplying sequence restrictions to population 2 \nDropping drugs not allowed for this population.\napplying rule: avelumab_plus_axitinib axitinib cabozantinib everolimus nivolumab_plus_ipilimumab lenvatinib_plus_everolimus cabozantinib_plus_nivolumab nivolumab_monotherapy pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib are only allowed treatments.\nPermutations before applying rule: 26404 \nPermutations after applying rule : 13344 \napplying rule: drug line restrictions.\nPermutations before applying rule: 13344 \nPermutations after applying rule : 1036 \n[1] \"axitinib\"\napplying rule. axitinib is only allowed after avelumab_plus_axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 1036 \nPermutations after applying rule : 1017 \n[1] \"everolimus\"\napplying rule. everolimus is only allowed after avelumab_plus_axitinib axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 1017 \nPermutations after applying rule : 1004 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule. lenvatinib_plus_everolimus is not allowed immediately after nivolumab_plus_ipilimumab \nPermutations before applying rule: 1004 \nPermutations after applying rule : 984 \n[1] \"axitinib\"\napplying rule axitinib : avelumab_plus_axitinib axitinib cannot be in one permutation\nPermutations before applying rule: 984 \nPermutations after applying rule : 915 \n[1] \"cabozantinib\"\napplying rule cabozantinib : cabozantinib cabozantinib_plus_nivolumab cannot be in one permutation\nPermutations before applying rule: 915 \nPermutations after applying rule : 876 \n[1] \"everolimus\"\napplying rule everolimus : lenvatinib_plus_everolimus everolimus cannot be in one permutation\nPermutations before applying rule: 876 \nPermutations after applying rule : 773 \n[1] \"io\"\napplying rule io : avelumab_plus_axitinib nivolumab_plus_ipilimumab cabozantinib_plus_nivolumab nivolumab_monotherapy lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 773 \nPermutations after applying rule : 657 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule lenvatinib_plus_everolimus : lenvatinib_plus_everolimus lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 657 \nPermutations after applying rule : 638 \n[1] \"nivolumab\"\napplying rule nivolumab : nivolumab_plus_ipilimumab cabozantinib_plus_nivolumab nivolumab_monotherapy cannot be in one permutation\nPermutations before applying rule: 638 \nPermutations after applying rule : 638 \n[1] \"TKIs\"\napplying rule TKIs : sunitinib pazopanib tivozanib cannot be in one permutation\nPermutations before applying rule: 638 \nPermutations after applying rule : 386 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule: lenvatinib_plus_everolimus can only be after ONE of avelumab_plus_axitinib axitinib cabozantinib cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 386 \nPermutations after applying rule : 359 \n[1] \"cabozantinib\"\napplying rule: cabozantinib as 2L+ only allowed after avelumab_plus_axitinib axitinib nivolumab_plus_ipilimumab lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 359 \nPermutations after applying rule : 359 \n[1] \"pazopanib\"\napplying rule: pazopanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 359 \nPermutations after applying rule : 339 \n[1] \"sunitinib\"\napplying rule: sunitinib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 339 \nPermutations after applying rule : 319 \n[1] \"tivozanib\"\napplying rule: tivozanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 319 \nPermutations after applying rule : 299 \nApplying sequence restrictions to population 3 \nDropping drugs not allowed for this population.\napplying rule: axitinib cabozantinib everolimus lenvatinib_plus_everolimus nivolumab_monotherapy pazopanib sunitinib tivozanib are only allowed treatments.\nPermutations before applying rule: 26404 \nPermutations after applying rule : 2080 \napplying rule: drug line restrictions.\nPermutations before applying rule: 2080 \nPermutations after applying rule : 330 \n[1] \"axitinib\"\napplying rule. axitinib is only allowed after avelumab_plus_axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 330 \nPermutations after applying rule : 330 \n[1] \"everolimus\"\napplying rule. everolimus is only allowed after avelumab_plus_axitinib axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 330 \nPermutations after applying rule : 330 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule. lenvatinib_plus_everolimus is not allowed immediately after nivolumab_plus_ipilimumab \nPermutations before applying rule: 330 \nPermutations after applying rule : 330 \n[1] \"axitinib\"\napplying rule axitinib : avelumab_plus_axitinib axitinib cannot be in one permutation\nPermutations before applying rule: 330 \nPermutations after applying rule : 330 \n[1] \"everolimus\"\napplying rule everolimus : lenvatinib_plus_everolimus everolimus cannot be in one permutation\nPermutations before applying rule: 330 \nPermutations after applying rule : 288 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule lenvatinib_plus_everolimus : lenvatinib_plus_everolimus lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 288 \nPermutations after applying rule : 288 \n[1] \"TKIs\"\napplying rule TKIs : sunitinib pazopanib tivozanib cannot be in one permutation\nPermutations before applying rule: 288 \nPermutations after applying rule : 120 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule: lenvatinib_plus_everolimus can only be after ONE of axitinib cabozantinib pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 120 \nPermutations after applying rule : 111 \n[1] \"cabozantinib\"\napplying rule: cabozantinib as 2L+ only allowed after avelumab_plus_axitinib axitinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 111 \nPermutations after applying rule : 111 \n[1] \"pazopanib\"\napplying rule: pazopanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 111 \nPermutations after applying rule : 111 \n[1] \"sunitinib\"\napplying rule: sunitinib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 111 \nPermutations after applying rule : 111 \n[1] \"tivozanib\"\napplying rule: tivozanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 111 \nPermutations after applying rule : 111 \nApplying sequence restrictions to population 4 \nDropping drugs not allowed for this population.\napplying rule: axitinib cabozantinib everolimus lenvatinib_plus_everolimus nivolumab_monotherapy pazopanib sunitinib tivozanib are only allowed treatments.\nPermutations before applying rule: 26404 \nPermutations after applying rule : 2080 \napplying rule: drug line restrictions.\nPermutations before applying rule: 2080 \nPermutations after applying rule : 440 \n[1] \"axitinib\"\napplying rule. axitinib is only allowed after avelumab_plus_axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 440 \nPermutations after applying rule : 440 \n[1] \"everolimus\"\napplying rule. everolimus is only allowed after avelumab_plus_axitinib axitinib cabozantinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 440 \nPermutations after applying rule : 440 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule. lenvatinib_plus_everolimus is not allowed immediately after nivolumab_plus_ipilimumab \nPermutations before applying rule: 440 \nPermutations after applying rule : 440 \n[1] \"axitinib\"\napplying rule axitinib : avelumab_plus_axitinib axitinib cannot be in one permutation\nPermutations before applying rule: 440 \nPermutations after applying rule : 440 \n[1] \"everolimus\"\napplying rule everolimus : lenvatinib_plus_everolimus everolimus cannot be in one permutation\nPermutations before applying rule: 440 \nPermutations after applying rule : 384 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule lenvatinib_plus_everolimus : lenvatinib_plus_everolimus lenvatinib_plus_pembrolizumab cannot be in one permutation\nPermutations before applying rule: 384 \nPermutations after applying rule : 384 \n[1] \"TKIs\"\napplying rule TKIs : sunitinib pazopanib tivozanib cannot be in one permutation\nPermutations before applying rule: 384 \nPermutations after applying rule : 198 \n[1] \"lenvatinib_plus_everolimus\"\napplying rule: lenvatinib_plus_everolimus can only be after ONE of axitinib cabozantinib pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 198 \nPermutations after applying rule : 182 \n[1] \"cabozantinib\"\napplying rule: cabozantinib as 2L+ only allowed after avelumab_plus_axitinib axitinib lenvatinib_plus_everolimus cabozantinib_plus_nivolumab pazopanib lenvatinib_plus_pembrolizumab sunitinib tivozanib \nPermutations before applying rule: 182 \nPermutations after applying rule : 182 \n[1] \"pazopanib\"\napplying rule: pazopanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 182 \nPermutations after applying rule : 182 \n[1] \"sunitinib\"\napplying rule: sunitinib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 182 \nPermutations after applying rule : 182 \n[1] \"tivozanib\"\napplying rule: tivozanib as 2L+ only allowed immediately after avelumab_plus_axitinib lenvatinib_plus_pembrolizumab cabozantinib_plus_nivolumab nivolumab_plus_ipilimumab \nPermutations before applying rule: 182 \nPermutations after applying rule : 182",
    "crumbs": [
      "Code walkthrough",
      "Set-up"
    ]
  },
  {
    "objectID": "pages/input_data.html",
    "href": "pages/input_data.html",
    "title": "Input data",
    "section": "",
    "text": "There are five input data files (stored in 1_Data/) that are used by 2_Scripts/Model_Structure.R.\nThese are each described below.",
    "crumbs": [
      "Code walkthrough",
      "Input data"
    ]
  },
  {
    "objectID": "pages/input_data.html#excel-user-interface",
    "href": "pages/input_data.html#excel-user-interface",
    "title": "Input data",
    "section": "Excel user interface",
    "text": "Excel user interface\n\n\n\n\n\n\nID6184_RCC_model inputs FAD version [UK RWE unredacted, ACIC redacted, cPAS redacted].xlsm\n\n\n\n\n\nThe majority of inputs for the code are made using an excel spreadsheet. This is currently populated with inputs that align with the final appraisal document (FAD) for TA964/ID6184, which is the appraisal of cabozantinib with nivolumab for untreated advanced renal cell carcinoma. Some of the inputs have been redacted in the publicly available spreadsheet as they are either academic and commercial in confidence (ACIC) or relate to the confident patient access scheme (cPAS). Hence, this version does not contain confidential company data, confidential price discounts or company individual patient data and treatment sequence data. The model does now contain UK real-world evidence (RWE) data which was redacted at the time of the appraisal at the request of the UK real-world evidence (RWE) data holders.\nThe data in the excel workbook will be imported to R using the sheet named ranges. In R, a nested list will be created where the Name is the reference for each item and the Cell Range is the content of the list.\nTo illustrate how this works, this example works through the parameter which contains a list of treatments allowed for population 1.\nOn the named ranges sheet, row 184 has Name List_pop1_allowed and Cell Range =Lists!$BA$11:$BA$22.\n\nOn the Lists sheet, we can see the list of allowed treatments.\n\nThen, if we import the excel spreadsheet, we can view that same parameter within the nested list i.\n\n# Import the functions required\nsource(file.path(\"../../3_Functions/excel/extract.R\"))\n\n# Import the excel file\nexcel_path &lt;- \"../../1_Data/ID6184_RCC_model inputs FAD version [UK RWE unredacted, ACIC redacted, cPAS redacted].xlsm\"\ni &lt;- f_excel_extract(excel_path, verbose = FALSE)\n\n# Tidy the imported parameters\ni &lt;- c(i,f_excel_cleanParams(i$R_table_param))\n\n# View the parameter\ni$List_pop1_allowed\n\n [1] \"avelumab_plus_axitinib\"      \"axitinib\"                   \n [3] \"cabozantinib\"                \"everolimus\"                 \n [5] \"lenvatinib_plus_everolimus\"  \"cabozantinib_plus_nivolumab\"\n [7] \"nivolumab_monotherapy\"       \"pazopanib\"                  \n [9] \"sunitinib\"                   \"tivozanib\"",
    "crumbs": [
      "Code walkthrough",
      "Input data"
    ]
  },
  {
    "objectID": "pages/input_data.html#hazard-ratios-hr-from-the-network-meta-analyses-nma",
    "href": "pages/input_data.html#hazard-ratios-hr-from-the-network-meta-analyses-nma",
    "title": "Input data",
    "section": "Hazard ratios (HR) from the network meta-analyses (NMA)",
    "text": "Hazard ratios (HR) from the network meta-analyses (NMA)\n\n\n\n\n\n\nPH_NMA_CODA.rds and FPNMA_means.rds\n\n\n\n\n\nThese files contain the outputs of the proportional hazards NMA (PH NMA) and the fractional polynomial NMA (FP NMA). In the publicly available versions, time to next treatment as a surrogate for nivolumab plus ipilimumab is not available to the public as this data was marked as confidential by the data holders.\n\n# Import the NMA results\nRDS_path2 &lt;- \"../../1_Data/PH_NMA_CODA.rds\"\nRDS_path3 &lt;- \"../../1_Data/FPNMA_means.rds\"\ni$PHNMA &lt;- readRDS(RDS_path2)\ni$FPNMA$means  &lt;- readRDS(RDS_path3)\n\n\n# Preview the PH NMA results\nkable(head(i$PHNMA$data))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrun\npopulation\nline\nmolecule\nendpoint\nreferencetreatment\nreferencetrial\nhr\n\n\n\n\n1\n0\n1\n4\n0\n7\n0\n0.8958580\n\n\n1\n0\n1\n1\n0\n7\n0\n0.7821468\n\n\n1\n0\n1\n8\n0\n7\n0\n1.4324613\n\n\n1\n0\n1\n2\n0\n7\n0\n0.7571763\n\n\n1\n0\n1\n5\n0\n7\n0\n0.9492596\n\n\n1\n0\n1\n3\n0\n7\n0\n0.8561836\n\n\n\n\n# Preview the FP NMA results\nkable(head(i$FPNMA$means))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntime\nintervention_code\nreference_treatment_code\nline\nendpoint\npopulation\nref_trial_code\nV1\n\n\n\n\n0.4615385\n4\n7\n1\n1\n0\n0\n6.0866273\n\n\n0.6923077\n4\n7\n1\n1\n0\n0\n0.7948374\n\n\n0.9230769\n4\n7\n1\n1\n0\n0\n0.6307802\n\n\n1.1538462\n4\n7\n1\n1\n0\n0\n0.6127038\n\n\n1.3846154\n4\n7\n1\n1\n0\n0\n0.6141338\n\n\n1.6153846\n4\n7\n1\n1\n0\n0\n0.6184885\n\n\n\n\n\nIn both tables, you can see that each row has a HR (hr/V1), and that these are for each combination of:\n\nPopulation (population)\nLine (line)\nTreatment (molecule/intervention_code)\nEndpoint (endpoint)\nReference treatment (referencetreatment/reference_treatment_code)\nReference trial (referencetrial/ref_trial_code)\n\nThe PH NMA results are from a Bayesian analysis and so has lots of samples for each HR (10,000). Hence, the filename is PH_NMA_CODA.rds, with CODA referring to “Convergence Diagnosis and Output Analysis”. When you run a Bayesian analysis, CODA samples are samples from the posterior distribution of your model parameters - in this case, the HRs.\n\nmax(i$PHNMA$data$run)\n\n[1] 10000\n\n\nThe FP NMA results are also from a Bayesian analysis, but a mean has been taken of each sample. Hence, the filename FPNMA_means.rds. However, it does have another column time, which is present as FP NMA generates time-varying HR.",
    "crumbs": [
      "Code walkthrough",
      "Input data"
    ]
  },
  {
    "objectID": "pages/input_data.html#individual-patient-data-ipd-from-the-real-world-evidence-rwe",
    "href": "pages/input_data.html#individual-patient-data-ipd-from-the-real-world-evidence-rwe",
    "title": "Input data",
    "section": "Individual patient data (IPD) from the real-world evidence (RWE)",
    "text": "Individual patient data (IPD) from the real-world evidence (RWE)\n\n\n\n\n\n\nIPD_R_input_noACIC.xlsx\n\n\n\n\n\nThis data represents the results from the RWE study by Challapalli et al. 2022, [1] with the patient-level data from that study shared by the owners of the dataset. In the publicly available version, data has been simulated to replaced data considered confidential by either the UK RWE dataholders or involved companies. The workbook has a sheet IPD which contains the patient-level data we want to import.\n\n# Import data from excel\nexcel_path2 &lt;- \"../../1_Data/IPD_R_input_noACIC.xlsx\"\nwb &lt;- f_excel_extract(excel_path2, verbose = FALSE)\n\n# Save to `i` as a data table\n# (`surv` as will use this data in survival analysis, and `pld` as it is\n# patient-level data)\ni$surv$pld &lt;- as.data.table(wb$`_xlnm._FilterDatabase`)\n\n# Preview data table\nkable(head(i$surv$pld))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\npopulation\nline\nmolecule\ntrial\nendpoint\ntimew\nevent_censor\nTimeoriginalunits\n\n\n\n\n6477\n0\n1\n1\n0\n0\n205.28572\n1\n205.28572\n\n\n6478\n0\n1\n1\n0\n0\n40.00357\n0\n40.00357\n\n\n6479\n0\n1\n1\n0\n0\n145.42857\n0\n145.42857\n\n\n6480\n0\n1\n1\n0\n0\n108.85714\n1\n108.85714\n\n\n6481\n0\n1\n1\n0\n0\n86.85714\n1\n86.85714\n\n\n6482\n0\n1\n1\n0\n0\n53.42857\n0\n53.42857\n\n\n\n\n\nEach row represents a patient. It states their:\n\nPopulation, line, treatment and trial\nEndpoint (e.g. overall survival (OS), progression-free survival (PFS))\nAt the timepoint given by timew (which is the time in weeks), whether they have experienced the event (event_censor). This can either be:\n\n1 - indicating the event occurred (e.g. patient died)\n0 - meaning their point is censored, so at the point when timing stopped (for whatever reason), the event had not occurred",
    "crumbs": [
      "Code walkthrough",
      "Input data"
    ]
  },
  {
    "objectID": "pages/input_data.html#results-from-the-survival-analysis-on-the-rwe-ipd-data",
    "href": "pages/input_data.html#results-from-the-survival-analysis-on-the-rwe-ipd-data",
    "title": "Input data",
    "section": "Results from the survival analysis on the RWE IPD data",
    "text": "Results from the survival analysis on the RWE IPD data\n\n\n\n\n\n\nsurvival_analysis_no_ipd_CompanyTTDTTPPPS_redacted.rds\n\n\n\n\n\nThis R data file contains the results from a pre-run survival analysis on the patient-level RWE data (i.e. the output of the if statement run if i$dd_run_surv_reg == \"Yes\" in Model_Structure.R). In the publicly available version, time to discontinuation (TTD) and time to progression (TTP) are set equal to PFS in order to protect data considered confidential by the involved companies, and post-progression survival (PPS) is set equal to the UK RWE\nThe R data file is a large nested list from which you can select a:\n\nPopulation (pop_0 to pop_2)\nLine (line_1 to line_5)\nMolecule (mol_0 to mol_12 and mol_990)\nTrial (trial_0 to `trial_2)\nEndpoint (endpoint_0 to endpoint_4)\n\nThere are then results with:\n\nfs_fits\ngof\nst\nplot\n\n\nRDS_path &lt;- \"../../1_Data/survival_analysis_no_ipd_CompanyTTDTTPPPS_redacted.rds\"\ni$surv$reg &lt;- readRDS(RDS_path)\n\nExample with no result from survival analysis:\n\ni$surv$reg$pop_0$line_1$mol_0$trial_0$endpoint_0\n\n$pop\n[1] \"All\"\n\n$line\n[1] \"Previously untreated\"\n\n$mol\n[1] \"Nivolumab monotherapy\"\n\n$tr\n[1] \"CheckMate 9ER\"\n\n$endpoint\n[1] \"OS\"\n\n$fs_fits\nNULL\n\n$gof\nNULL\n\n$st\nNULL\n\n$plot\nNULL\n\n\nExample with a result - PFS on avelumab plus axitinib as a 1L treatment in a favourable risk population based on the real world evidence.\n\nlapply(c(\"pop\", \"line\", \"mol\", \"tr\", \"endpoint\"), function(x) i$surv$reg$pop_2$line_1$mol_4$trial_2$endpoint_1[[x]])\n\n[[1]]\n[1] \"Favourable risk\"\n\n[[2]]\n[1] \"Previously untreated\"\n\n[[3]]\n[1] \"Avelumab plus axitinib\"\n\n[[4]]\n[1] \"Real world evidence\"\n\n[[5]]\n[1] \"PFS\"\n\n\nVarious distributions were fit - for example, exponential…\n\ni$surv$reg$pop_2$line_1$mol_4$trial_2$endpoint_1$fs_fits$exp\n\n$coefs\n[1] -5.016078\n\n$vcov\n           rate\nrate 0.03846153\n\n$fit\n      AIC       BIC    logLik \n 314.8361  316.9792 -156.4180 \n\n\nThe goodness of fit for each distribution is described…\n\nkable(i$surv$reg$pop_2$line_1$mol_4$trial_2$endpoint_1$gof)\n\n\n\n\n\nAIC\nBIC\nlogLik\n\n\n\n\ngengamma\n317.6759\n324.1053\n-155.8380\n\n\nexp\n314.8361\n316.9792\n-156.4180\n\n\nweibull\n316.2418\n320.5281\n-156.1209\n\n\nlnorm\n316.5742\n320.8604\n-156.2871\n\n\ngamma\n316.0581\n320.3443\n-156.0290\n\n\ngompertz\n316.8228\n321.1090\n-156.4114\n\n\nllogis\n315.2343\n319.5206\n-155.6172\n\n\n\n\n\nAnd the extrapolated survival times are provided from survival analysis using each distribution…\n\nkable(head(i$surv$reg$pop_2$line_1$mol_4$trial_2$endpoint_1$st, 10))\n\n\n\n\n\n\n\n\n\n\n\n\n\ngengamma\nexp\nweibull\nlnorm\ngamma\ngompertz\nllogis\n\n\n\n\n1.0000000\n1.0000000\n1.0000000\n1.0000000\n1.0000000\n1.0000000\n1.0000000\n\n\n0.9985777\n0.9933915\n0.9964812\n0.9996291\n0.9972167\n0.9935903\n0.9980669\n\n\n0.9958140\n0.9868266\n0.9922259\n0.9979763\n0.9935048\n0.9872169\n0.9950622\n\n\n0.9922663\n0.9803051\n0.9876526\n0.9950948\n0.9893592\n0.9808795\n0.9914695\n\n\n0.9881616\n0.9738267\n0.9828687\n0.9912317\n0.9849185\n0.9745780\n0.9874457\n\n\n0.9836342\n0.9673911\n0.9779288\n0.9866047\n0.9802557\n0.9683123\n0.9830798\n\n\n0.9787752\n0.9609981\n0.9728668\n0.9813859\n0.9754168\n0.9620820\n0.9784315\n\n\n0.9736504\n0.9546473\n0.9677061\n0.9757088\n0.9704341\n0.9558872\n0.9735446\n\n\n0.9683099\n0.9483384\n0.9624641\n0.9696773\n0.9653318\n0.9497276\n0.9684535\n\n\n0.9627928\n0.9420713\n0.9571540\n0.9633732\n0.9601284\n0.9436030\n0.9631860",
    "crumbs": [
      "Code walkthrough",
      "Input data"
    ]
  }
]